{"meta":{"title":"鹤冲天","subtitle":"","description":"","author":"马孟起","url":"http://kjuan.xyz","root":"/"},"pages":[{"title":"标签聚合","date":"2025-04-01T06:07:22.561Z","updated":"2025-04-01T06:07:22.561Z","comments":false,"path":"tags/index.html","permalink":"http://kjuan.xyz/tags/","excerpt":"","text":""},{"title":"网站公告","date":"2025-03-31T16:00:00.000Z","updated":"2025-04-01T05:24:04.327Z","comments":false,"path":"公告/index.html","permalink":"http://kjuan.xyz/%E5%85%AC%E5%91%8A/","excerpt":"","text":"2023年11月01日 网站更新 网站改版完成 经过一段时间的努力，网站已完成全面改版，采用了全新的设计风格，优化了用户体验。主要更新内容如下： 全新的首页设计，视觉效果更佳 优化了文章页面的阅读体验 增加了深色模式支持 提升了网站整体加载速度 感谢大家一直以来的支持！ 2023年10月15日 功能预告 即将上线的新功能 我们计划在近期上线以下新功能： 文章评论系统升级 会员积分系统 更多互动功能 敬请期待！ 2023年09月20日 活动通知 读者互动活动 为了增进与读者的互动，我们将举办一系列线上活动： 优质评论奖励计划 读者投稿专栏 每月读者问答活动 欢迎大家积极参与！ 2023年08月10日 网站公告 网站创建 网站正式创建！我将在这里分享技术文章、学习笔记和个人感悟。 感谢访问，希望我的内容能够对您有所帮助！ /* 公告页面样式 */ .announcement-container { max-width: 800px; margin: 0 auto; padding: 20px; } .announcement-header { text-align: center; margin-bottom: 40px; position: relative; } .announcement-title { font-size: 2rem; color: #3498db; display: inline-block; padding-bottom: 10px; position: relative; } .announcement-title:after { content: \"\"; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 100px; height: 3px; background: linear-gradient(90deg, #3498db, #9b59b6); border-radius: 3px; } .announcement-icon { font-size: 2.5rem; color: #3498db; margin-bottom: 15px; display: block; } .announcement-item { margin-bottom: 40px; padding: 25px; border-radius: 15px; background: white; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05); transition: all 0.3s ease; border-left: 5px solid #3498db; } .announcement-item:hover { transform: translateY(-5px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1); } .announcement-meta { display: flex; justify-content: space-between; margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #f0f0f0; } .announcement-date { color: #7f8c8d; font-size: 0.9rem; } .announcement-tag { background: #3498db; color: white; padding: 3px 10px; border-radius: 20px; font-size: 0.8rem; } .announcement-item:nth-child(3) .announcement-tag { background: #9b59b6; } .announcement-item:nth-child(4) .announcement-tag { background: #e74c3c; } .announcement-item:nth-child(5) .announcement-tag { background: #2ecc71; } .announcement-content h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.4rem; } .announcement-content p { color: #34495e; line-height: 1.7; margin-bottom: 15px; } .announcement-content ul { padding-left: 20px; margin-bottom: 15px; } .announcement-content ul li { color: #34495e; margin-bottom: 8px; position: relative; } .announcement-content ul li:before { content: \"•\"; color: #3498db; font-weight: bold; display: inline-block; width: 1em; margin-left: -1em; } @media (max-width: 768px) { .announcement-meta { flex-direction: column; } .announcement-date { margin-bottom: 10px; } .announcement-tag { align-self: flex-start; } }"},{"title":"关于","date":"2025-04-05T18:01:00.334Z","updated":"2025-04-05T18:01:00.334Z","comments":false,"path":"about/index.html","permalink":"http://kjuan.xyz/about/","excerpt":"","text":"战歌起 您的浏览器不支持音频播放器 Star Sky Two Steps From Hell 关于我这里是关于我的详细介绍 技术栈 数据分析 后端架构 人工智能 学习中 深度学习 云原生 分布式系统 兴趣爱好 编程 阅读 音乐 .music-player { background: linear-gradient(45deg, #3a1c71, #d76d77, #ffaf7b); border-radius: 15px; padding: 20px; margin: 20px 0; box-shadow: 0 10px 20px rgba(0,0,0,0.3); position: relative; overflow: hidden; } .music-player::before { content: \"\"; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 60%); transform: rotate(45deg); z-index: 1; pointer-events: none; } .player-title { color: white; font-size: 1.5em; margin-bottom: 15px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); font-weight: bold; text-align: center; } .custom-audio { width: 100%; height: 50px; outline: none; filter: drop-shadow(0 5px 10px rgba(0,0,0,0.2)); display: flex; justify-content: center; margin: 0 auto; } .custom-audio::-webkit-media-controls-panel { background: rgba(255,255,255,0.2); border-radius: 10px; } .custom-audio::-webkit-media-controls-play-button { background-color: rgba(255,255,255,0.8); border-radius: 50%; transform: scale(1.2); } .custom-audio::-webkit-media-controls-enclosure { display: flex; justify-content: center; align-items: center; } .music-info { display: flex; align-items: center; margin-top: 15px; justify-content: center; } .album-art { width: 60px; height: 60px; border-radius: 50%; margin-right: 15px; box-shadow: 0 5px 10px rgba(0,0,0,0.2); animation: rotate 10s linear infinite; } @keyframes rotate { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } .track-info { color: white; } .track-name { font-weight: bold; font-size: 1.1em; margin-bottom: 5px; } .artist { font-size: 0.9em; opacity: 0.8; } .visualizer { display: flex; justify-content: center; align-items: flex-end; height: 30px; margin-top: 10px; } .bar { width: 5px; background: white; margin: 0 2px; border-radius: 5px; animation: visualize 0.8s infinite alternate; } .bar:nth-child(1) { height: 30%; animation-delay: 0.2s; } .bar:nth-child(2) { height: 60%; animation-delay: 0.3s; } .bar:nth-child(3) { height: 80%; animation-delay: 0.4s; } .bar:nth-child(4) { height: 40%; animation-delay: 0.5s; } .bar:nth-child(5) { height: 70%; animation-delay: 0.6s; } .bar:nth-child(6) { height: 50%; animation-delay: 0.7s; } .bar:nth-child(7) { height: 90%; animation-delay: 0.8s; } .bar:nth-child(8) { height: 30%; animation-delay: 0.9s; } @keyframes visualize { from { transform: scaleY(1); } to { transform: scaleY(1.5); } }"},{"title":"博客总结","date":"2023-11-21T16:00:00.000Z","updated":"2025-04-03T06:42:41.991Z","comments":false,"path":"总结/index.html","permalink":"http://kjuan.xyz/%E6%80%BB%E7%BB%93/","excerpt":"","text":"📄 0 文章总数 📝 0 文章总字数 📁 0 分类总数 🏷️ 0 标签总数 📊 文章发布趋势 月度 年度 📊 分类文章数量 📂 分类统计 0 个分类 加载中... 🏷️ 标签统计 0 个标签 加载中... 🔥 最新文章 加载中... .stat-card { transition: all 0.3s; border-radius: 10px; overflow: hidden; } .stat-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.1); } .stat-icon { font-size: 2rem; margin-bottom: 10px; color: #0066cc; } #category-list .badge, #tag-list .badge { font-size: 0.9rem; padding: 8px 15px; margin: 0 8px 8px 0; border-radius: 20px; transition: all 0.2s; } #category-list .badge { background-color: rgba(0, 123, 255, 0.1); color: #007bff; border: 1px solid rgba(0, 123, 255, 0.2); } #tag-list .badge { background-color: rgba(23, 162, 184, 0.1); color: #17a2b8; border: 1px solid rgba(23, 162, 184, 0.2); } #category-list .badge:hover, #tag-list .badge:hover { transform: scale(1.05); } #category-list .badge:hover { background-color: #007bff; color: white; } #tag-list .badge:hover { background-color: #17a2b8; color: white; } .card-header { background-color: rgba(0,0,0,0.03); border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-item { display: flex; align-items: center; padding: 15px; border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-rank { font-size: 1.5rem; font-weight: bold; margin-right: 15px; color: #dc3545; min-width: 30px; text-align: center; } .popular-post-title { flex-grow: 1; } .popular-post-date { color: #6c757d; font-size: 0.85rem; } .loading-text { color: #6c757d; } /* 简单图表样式 */ .simple-chart { height: 250px; display: flex; align-items: flex-end; padding-top: 20px; } .chart-bar { flex: 1; background-color: #007bff; margin: 0 3px; border-radius: 3px 3px 0 0; position: relative; min-height: 1px; transition: height 0.5s; } .chart-bar-label { position: absolute; top: -20px; left: 0; right: 0; text-align: center; font-size: 11px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; transform: rotate(-45deg); transform-origin: right bottom; } .chart-bar-value { position: absolute; bottom: 5px; left: 0; right: 0; text-align: center; color: white; font-size: 12px; font-weight: bold; } .progress-bar { transition: width 0.5s; } // 避免使用外部库，改用内置fetch API document.addEventListener('DOMContentLoaded', function() { // 缓存机制，减少重复请求 const CACHE_KEY = 'blog_stats_cache'; const CACHE_TIME = 300000; // 修改为5分钟缓存 // 添加强制刷新功能 const urlParams = new URLSearchParams(window.location.search); const forceRefresh = urlParams.get('refresh') === 'true'; // 尝试从缓存获取数据 function getCache() { try { const cache = localStorage.getItem(CACHE_KEY); if (cache && !forceRefresh) { const { data, timestamp } = JSON.parse(cache); if (Date.now() - timestamp < CACHE_TIME) { return data; } } } catch (e) { console.error('读取缓存失败', e); } return null; } // 设置缓存 function setCache(data) { try { localStorage.setItem(CACHE_KEY, JSON.stringify({ data, timestamp: Date.now() })); } catch (e) { console.error('设置缓存失败', e); } } // 添加刷新按钮 const container = document.querySelector('.container'); const refreshButton = document.createElement('div'); refreshButton.className = 'text-center mb-4'; refreshButton.innerHTML = ` 刷新统计数据 `; container.insertBefore(refreshButton, container.firstChild); document.getElementById('refresh-stats').addEventListener('click', function() { window.location.href = window.location.pathname + '?refresh=true'; }); // 先检查是否有缓存 const cachedData = getCache(); if (cachedData) { processData(cachedData); return; } // 无缓存，从服务器获取 fetch('/content.json') .then(response => response.json()) .then(data => { // 缓存数据 setCache(data); processData(data); }) .catch(error => { console.error('获取博客数据失败:', error); document.querySelector('.container').innerHTML = '获取博客数据失败，请确保已安装 hexo-generator-json-content 插件'; }); function processData(data) { // 移除加载提示 document.querySelectorAll('.loading-text').forEach(element => { element.parentElement.innerHTML = ''; }); // 文章总数 const postCount = data.posts.length; document.getElementById('post-count').textContent = postCount; // 计算总字数 let wordCount = 0; data.posts.forEach(post => { if (post.text) { wordCount += post.text.length; } }); // 格式化字数显示 let formattedWordCount; if (wordCount > 1000000) { formattedWordCount = (wordCount / 1000000).toFixed(1) + 'M'; } else if (wordCount > 10000) { formattedWordCount = (wordCount / 10000).toFixed(1) + '万'; } else if (wordCount > 1000) { formattedWordCount = (wordCount / 1000).toFixed(1) + 'k'; } else { formattedWordCount = wordCount; } document.getElementById('word-count').textContent = formattedWordCount; // 获取所有分类 const categories = {}; data.posts.forEach(post => { if (post.categories) { post.categories.forEach(category => { if (categories[category.name]) { categories[category.name]++; } else { categories[category.name] = 1; } }); } }); // 显示分类数量 const categoryCount = Object.keys(categories).length; document.getElementById('category-count').textContent = categoryCount; document.getElementById('category-total').textContent = categoryCount + ' 个分类'; // 显示分类列表 const categoryList = document.getElementById('category-list'); const sortedCategories = Object.entries(categories).sort((a, b) => b[1] - a[1]); sortedCategories.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/categories/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; categoryList.appendChild(badge); }); // 获取所有标签 const tags = {}; data.posts.forEach(post => { if (post.tags) { post.tags.forEach(tag => { if (tags[tag.name]) { tags[tag.name]++; } else { tags[tag.name] = 1; } }); } }); // 显示标签数量 const tagCount = Object.keys(tags).length; document.getElementById('tag-count').textContent = tagCount; document.getElementById('tag-total').textContent = tagCount + ' 个标签'; // 显示标签列表 const tagList = document.getElementById('tag-list'); const sortedTags = Object.entries(tags).sort((a, b) => b[1] - a[1]); sortedTags.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/tags/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; tagList.appendChild(badge); }); // 按日期对文章进行分组 const postsByMonth = {}; const postsByYear = {}; data.posts.forEach(post => { if (post.date) { const date = new Date(post.date); const year = date.getFullYear(); const month = date.getMonth(); // 按月分组 const monthKey = `${year}-${month+1}`; if (postsByMonth[monthKey]) { postsByMonth[monthKey]++; } else { postsByMonth[monthKey] = 1; } // 按年分组 if (postsByYear[year]) { postsByYear[year]++; } else { postsByYear[year] = 1; } } }); // 创建文章发布统计图表 - 使用简单的DIV实现 const monthLabels = []; const monthData = []; // 获取最近12个月的数据 const now = new Date(); for (let i = 11; i >= 0; i--) { const month = new Date(now.getFullYear(), now.getMonth() - i, 1); const year = month.getFullYear(); const monthNum = month.getMonth() + 1; const monthKey = `${year}-${monthNum}`; const monthName = `${year}/${monthNum}`; monthLabels.push(monthName); monthData.push(postsByMonth[monthKey] || 0); } const yearLabels = Object.keys(postsByYear).sort(); const yearData = yearLabels.map(year => postsByYear[year]); // 创建简单的柱状图 renderSimpleBarChart('post-chart', monthLabels, monthData); // 切换年度/月度按钮事件 document.getElementById('month-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('year-btn').classList.remove('active'); renderSimpleBarChart('post-chart', monthLabels, monthData); }); document.getElementById('year-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('month-btn').classList.remove('active'); renderSimpleBarChart('post-chart', yearLabels, yearData); }); // 创建分类统计图表 const topCategories = sortedCategories.slice(0, 8); const categoryChartLabels = topCategories.map(item => item[0]); const categoryChartData = topCategories.map(item => item[1]); renderSimpleBarChart('category-chart', categoryChartLabels, categoryChartData, [ '#FF9999', '#99CCFF', '#FFCC99', '#99FF99', '#CC99FF', '#FFFF99', '#FF99CC', '#99FFCC' ]); // 热门文章展示（这里以日期最新的5篇作为演示） const popularPosts = [...data.posts].sort((a, b) => { return new Date(b.date) - new Date(a.date); }).slice(0, 5); const popularPostsContainer = document.getElementById('popular-posts'); popularPostsContainer.innerHTML = ''; popularPosts.forEach((post, index) => { const postDate = new Date(post.date); const formattedDate = `${postDate.getFullYear()}-${postDate.getMonth()+1}-${postDate.getDate()}`; const postItem = document.createElement('a'); // 修复文章链接路径，确保以斜杠开头 postItem.href = post.path.startsWith('/') ? post.path : '/' + post.path; postItem.className = 'list-group-item list-group-item-action popular-post-item'; postItem.innerHTML = ` ${index+1} ${post.title} ${formattedDate} `; popularPostsContainer.appendChild(postItem); }); } // 渲染简单的柱状图，不依赖外部库 function renderSimpleBarChart(containerId, labels, data, colors) { const container = document.getElementById(containerId); container.innerHTML = ''; // 找出最大值 const maxValue = Math.max(...data); // 创建柱状图 data.forEach((value, index) => { const bar = document.createElement('div'); bar.className = 'chart-bar'; // 根据数值设置高度百分比 const heightPercent = maxValue > 0 ? (value / maxValue * 100) : 0; bar.style.height = heightPercent + '%'; // 如果有自定义颜色，则使用 if (colors && colors[index]) { bar.style.backgroundColor = colors[index]; } // 添加标签 const label = document.createElement('div'); label.className = 'chart-bar-label'; label.textContent = labels[index]; bar.appendChild(label); // 添加数值 if (value > 0) { const valueDiv = document.createElement('div'); valueDiv.className = 'chart-bar-value'; valueDiv.textContent = value; bar.appendChild(valueDiv); } container.appendChild(bar); }); } });"}],"posts":[{"title":"卡特兰数——精简版","slug":"卡特兰数-精简版","date":"2025-04-05T12:07:45.000Z","updated":"2025-04-05T17:05:35.008Z","comments":true,"path":"2025/04/05/卡特兰数-精简版/","permalink":"http://kjuan.xyz/2025/04/05/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0-%E7%B2%BE%E7%AE%80%E7%89%88/","excerpt":"介绍卡特兰数(Catalan number)的定义与应用","text":"卡特兰数(Catalan Number)引言卡特兰数(Catalan number)是组合数学中一个常出现于各种计数问题中的数列。它以中国蒙古族数学家明安图和比利时数学家欧仁·查理·卡特兰的名字命名。 基本性质 前几项：1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786… 递推公式：$$C_n &#x3D; C_0 C_{n-1} + C_1 C_{n-2} + \\cdots + C_{n-1} C_0$$ 通项公式：$$C_n &#x3D; \\frac{1}{n+1} \\binom{2n}{n} &#x3D; \\frac{(2n)!}{(n+1)!n!}$$ 数学推导我们以最经典的栈问题来推导卡特兰数。 问题描述：n个元素的进栈序列为1,2,3,4…..n，求有多少种不同的出栈序列？ 思路1: 路径计数法 将进栈表示为+1，出栈表示为-1 合法的出栈序列必须满足： 任意前缀和必须≥0（栈不能为空时出栈） +1和-1的总数各为n（n个元素都要进出栈） 分析过程： 所有可能的进出栈序列总数为 $\\binom{2n}{n}$（从2n个位置中选n个放+1） 非法序列：存在某个前缀和&lt;0 对于每个非法序列，找到第一个前缀和为-1的位置，将此位置及之前所有元素取反 取反后得到的序列有n+1个+1和n-1个-1 非法序列总数为 $\\binom{2n}{n+1}$ 结论：合法出栈序列数 &#x3D; $\\binom{2n}{n} - \\binom{2n}{n+1} &#x3D; \\frac{\\binom{2n}{n}}{n+1}$ 思路2: 递归分解法 设 f(n) &#x3D; 元素个数为n的出栈序列种数 假设第一个出栈的元素序号为k（1≤k≤n） 当k出栈时： 元素1到k-1必须已经进栈 元素k+1到n尚未进栈 此时问题分解为两个子问题： 元素1到k-1的出栈序列：f(k-1)种可能 元素k+1到n的出栈序列：f(n-k)种可能 递推公式：$$f(n) &#x3D; \\sum_{k&#x3D;1}^{n} f(k-1) \\cdot f(n-k)$$ 令f(0)&#x3D;1，可得：$$f(n) &#x3D; \\sum_{i&#x3D;0}^{n-1} f(i) \\cdot f(n-1-i)$$ 这与卡特兰数的递推公式完全一致，因此f(n) &#x3D; $C_n$ 应用实例1. 括号匹配问题：n对括号，有多少种合法的括号匹配序列？ 分析： 左括号视为+1，右括号视为-1 任意前缀和≥0（右括号不能多于左括号） 最终和为0（左右括号数量相等） 结论：合法括号序列数为 $C_n$ 2. 二叉树计数问题：n+1个叶子结点可以构成多少种形状不同的满二叉树？ 分析方法一： 深度优先遍历二叉树，向左记为+1，向右记为-1 每个右分支都对应一个左分支 n+1个叶子对应n个内部节点，需要2n次扩展 分析方法二： 根节点将树分为左右两棵子树 设T(i,j)表示左子树有i个节点，右子树有j个节点 递推关系：$C_n &#x3D; \\sum_{i&#x3D;0}^{n-1} C_i \\cdot C_{n-1-i}$ 结论：不同形状的满二叉树数量为 $C_n$ 3. 电影购票问题问题：电影票价50元，售票处无零钱。m个人持100元，n个人持50元(n&gt;m)，问有多少种排队方式使每人都能买到票？ 分析： 持50元的人标记为+1，持100元的人标记为-1 任意前缀和≥0（售票处必须有足够零钱） 考虑人的排列，总方案数为 $C_m^{m+n} \\cdot m! \\cdot n!$ 4. 矩阵连乘问题：表达式a₁×a₂×…×aₙ有多少种不同的加括号方式？ 分析： 通过括号将表达式分为两部分，再递归处理 递推关系：$f(n) &#x3D; \\sum_{i&#x3D;1}^{n-1} f(i) \\cdot f(n-i)$ 初始条件：f(1) &#x3D; 1 结论：n个矩阵的不同括号化方案数为 $C_{n-1}$ 5. 凸多边形三角剖分问题：n+2边凸多边形可以划分为三角形的方法数？ 分析： 选定一条边为基准，从其余顶点选一个连接，将多边形分为三部分 递推关系：$f(n) &#x3D; \\sum_{i&#x3D;0}^{n-1} f(i) \\cdot f(n-1-i)$ 结论：n+2边凸多边形的三角剖分数为 $C_n$ 6. 圆上非交叉连线问题：圆上2n个点，将这些点成对连接使得n条线段不相交的方法数？ 分析： 选定一个点，它必须与某个点相连 这条连线将其余点分为两部分，递归处理 递推关系与卡特兰数相同 结论：不相交连线方式数为 $C_n$ 7. 单调路径问题：从(0,0)到(n,n)，只能向右或向上移动，且不能越过对角线，有多少条路径？ 分析： 设E表示向东，N表示向北 任意前缀中E的个数不小于N的个数 等价于合法括号序列问题 结论：合法路径数为 $C_n$ 8. 阶梯图形填充问题：用n个长方形填充高度为n的阶梯状图形的方法数？ 分析： 递归分解问题 递推关系与卡特兰数相同 结论：填充方法数为 $C_n$ 9. 两队排队问题问题：2n个高矮不同的人排成两队，每队n人，要求第二排的人比对应第一排的人高，有多少种排法？ 分析： 先将2n人按高矮排序 问题转化为从2n人中选n人排在第一排 等价于进出栈问题 结论：排队方式数为 $C_n$ 其他应用以下问题也可用卡特兰数解决： 汽车队在狭窄路面上行驶，可进入死胡同调头但不能超车，n辆车有多少种不同的行驶顺序？ n个不同的碗从一摞变为另一摞，中间可临时放置，有多少种可能的放置顺序？ 参考资料Sherry_Yue的博客","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"卡特兰数","slug":"卡特兰数","permalink":"http://kjuan.xyz/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"}],"author":"快马飞刀"},{"title":"Catalan number","slug":"卡特兰数","date":"2025-04-05T12:07:45.000Z","updated":"2025-04-05T17:05:35.007Z","comments":true,"path":"2025/04/05/卡特兰数/","permalink":"http://kjuan.xyz/2025/04/05/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/","excerpt":"介绍卡特兰数(Catalan number)的定义与应用","text":"卡特兰数(Catalan Number)引言卡特兰数(Catalan number)是组合数学中一个常出现于各种计数问题中的数列,他以中国蒙古族数学家明安图和比利时数学家欧仁·查理·卡特兰的名字命名 基本性质 前几项：1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786… 递推公式：$$C_n &#x3D; C_0 C_{n-1} + C_1 C_{n-2} + \\cdots + C_{n-1} C_0$$ 通项公式：$$C_n &#x3D; \\frac{1}{n+1} \\binom{2n}{n} &#x3D; \\frac{(2n)!}{(n+1)!n!}$$ 数学推理我们以最经典的栈问题举例 问题描述：n个元素的进栈序列为1,2,3,4…..n，则有多少种出栈序列 思路1 将进栈表示为+1，出栈表示为-1，每次要出栈栈内元素要不为空，即每个-1前面必然有一个+1与之对应，出栈序列的前缀和必然大于等于0，且+1的数量等于-1的数量 假设有一个非法出栈序列x，必然有某前几项和小于0，找到第一个前缀和小于0的前缀，它的前缀和也就是-1，如果将其元素进行取反，其前缀和也就变成了1，取反后，-1比1少一个，则+1变为n+1个，-1变为n-1个 进栈出栈总数量为2n，n个进栈，n个出栈，出栈的可能序列总数量为$C_{2n}^{n}$ 每一个非法出栈序列，都对应一个对其第一个前缀和为-1的所有元素进行取反的序列，该序列有n+1个进栈，n-1个出栈，非法出栈的可能序列总数量为$C_{2n}^{n+1}$ 因此，合法的出栈序列总数为$C_{2n}^{n}$-$C_{2n}^{n+1}$&#x3D;$\\frac{C_{2n}^{n}}{n+1}$ 至此，我们得到了卡特兰数的通项为$\\frac{C_{2n}^{n}}{n+1}$ 思路2 首先，我们设 f(n)&#x3D;元素个数为n的出栈序列种数。 同时假定，从开始到栈第一次出到空为止，这段过程中第一个出栈的序数是k。特别地，如果栈直到整个过程结束时才空，则k&#x3D;n。 首次出空之前第一个出栈的序数k将1 ~ n的序列分成两个序列：其中一个是1 ~ k-1，序列个数为k-1；另外一个是k+1 ~ n，序列个数是n-k。 此时，我们若把k视为确定一个序数，那么根据乘法原理，f(n)的问题就等价于——序列个数为k-1的出栈序列种数乘以序列个数为n - k的出栈序列种数（一种递归的思想），即选择k这个序数的f(n)&#x3D;f(k-1)×f(n-k)。 而k可以选1到n，所以再根据加法原理，将k取不同值的序列种数相加，得到的总序列种数为：f ( n ) &#x3D; f ( 0 ) f ( n − 1 ) + f ( 1 ) f ( n − 2 ) + … … + f ( n − 1 ) f ( 0 ) 这个公式与卡特兰数的递推式一模一样，即为$$C_n &#x3D; C_0 C_{n-1} + C_1 C_{n-2} + \\cdots + C_{n-1} C_0$$ 最后，其解为第n个卡特兰数，即$\\frac{C_{2n}^{n}}{n+1}$ 应用1.括号匹配问题描述：n对括号，有多少种”括号匹配”的序列 思路：把左括号看成+1，右括号看成-1，每个右括号都有与之唯一对应的左括号，那问题同样可以用进出栈问题一思路来解决，其解等于第n个卡特兰数 其解为$\\frac{C_{2n}^{n}}{n+1}$ 2.二叉树问题描述：n+1个叶子结点可以构成多少种形状不同的满二叉树（n个节点构成的满二叉树）思路1： 深度优先搜索这棵满二叉树，每次向左扩展记为+1，向右扩展记为-1 由于每个非叶子结点都有左右两子节点，所以每次必然先向左扩展，再向右扩展，每次右扩展都和左扩展一一对应，同理可以用进出栈思路一来解决 叶子数&#x3D;内部节点数+1，对于n+1个叶子节点，内部节点数为n，每生成一个内部节点，需要向左向右扩展两次，即一共需要扩展2n次 可以构成$\\frac{C_{2n}^{n}}{n+1}$棵形状不同的满二叉树 其解等于第n个卡特兰数 思路2： 可以这么考虑，根占用1个节点，剩下n-1个节点那么剩余的n-1个结点可以有如下的分配方式，T ( 0 , n − 1 ) , T ( 1 , n − 2 ) , . . . , T ( n − 1 , 0 ) 。设T ( i , j ) 表示根的左子树含i个结点，右子树含j个结点。 同理用递归的思想分配左右子树的节点，每个节点都是等价的，其递推公式为：$$C_n &#x3D; C_0 C_{n-1} + C_1 C_{n-2} + \\cdots + C_{n-1} C_0$$ 其解为$\\frac{C_{2n}^{n}}{n+1}$ 3.电影购票（找零钱问题）问题描述：某电影院票价为50元，售票厅处没有零钱，m个人有100元，n个人有50元，问：有多少种排队方式，可以让每个人都买到票（n&gt;m） 思路： 将持有50元的人标记为+1，持有100元的人记为-1 每个持有100元的人都要和一个持有50元的人匹配 同理用进出栈问题思路一解决该问题 由于每个人都是独立的个体，总排队方式为$\\frac{C_{2n}^{n}}{n+1}$*$m!*n!$ 其解为$\\frac{C_{2n}^{n}}{n+1}$*$m!*n!$ 4.矩阵连乘问题描述：P&#x3D;a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？ 思路： 通过括号化，将p分成两个部分，再分别对这两部分进行括号化（递归思想） 括号内的括号化方案只和括号内元素数量有关，与其具体内容无关 即总方案可以表示成：f(n) &#x3D; f(1)*f(n-1) + f(2)*f(n-2) + f(3)*f(n-3) + f(n-1)*f(1)。f(1)*f(n-1)表示分成(a1)×(a2×a3…×an)两部分 计算开始前几项，f(1) &#x3D; 1, f(2) &#x3D; 1, f(3) &#x3D; 2, f(4) &#x3D; 5。结合递归式，不难发现f(n)等于h(n-1)，其解等于第n-1个卡特兰数 其解为$\\frac{C_{2n-2}^{n-1}}{n}$ 5.凸多边形划分问题描述：在一个n边形中，通过不相交于n边形内部的对角线，把n边形拆分为若干个三角形，问有多少种拆分方案？ 思路： 以某条边AB为基准，从其余顶点选择一个顶点C，连接AC,BC，可以将凸变形分成三份,中间是一个三角形，左右两边还是凸边形 设问题的解为f(n)，n表示顶点数，那么f(n)&#x3D;f(2)*f(n-1)+f(3)*f(n-2)+……+f(n-2)*f(3)+f(n-1)*f(2)。 其中，f(2)*f(n-1)表示：三个相邻的顶点构成一个三角形，另外两个部分的顶点数分别为2（一条直线两个点）和n-1。 其中，f(3)*f(n-2)表示：将凸多边形分为三个部分，左右两边分别是一个有3个顶点的三角形和一个有n-2个顶点的多边形。 设f(2) &#x3D; 1，那么f(3) &#x3D; 1, f(4) &#x3D; 2, f(5) &#x3D; 5。结合递推式，不难发现f(n) 等于h(n-2)，其解等于第n-2个卡特兰数（可以想象成有两个顶点无法连接） 其解为$\\frac{C_{2n-4}^{n-2}}{n-1}$ 6.圆上n条线段问题描述：在圆上选择2n个点，将这些点成对连接起来使得所得到的n条线段不相交的方法数？ 思路： 以某个点为基准，记编号为0，则与其相连的点的编号一定是奇数，否则会多余出来一个点 连接两点，可以将圆分成两部分，再将左右两部分分别连接两点（递归思想） 设问题的解f(n)，那么f(n) &#x3D; f(0)*f(n-1) + f(1)*f(n-2) + f(2)*f(n-3) + …+f(n-2)*f(1) + f(n-1)*f(0) f(0)*f(n-1)表示编号0的点与编号1的点相连，此时位于它们右边的点的个数为0(可以连成0条线段)，而位于它们左边的点为2n-2（可以连成n-1条线段）。依次类推 令f(0) &#x3D; 1, f(1) &#x3D; 1, f(2) &#x3D; 2，不难发现f(n)&#x3D;h(n)，其解等于第n个卡特兰数 其解为$\\frac{C_{2n}^{n}}{n+1}$ 7.单调路径问题描述：一位大城市的律师在他住所以北n个街区和以东n个街区处工作，每天他走2n个街区去上班。如果他从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？ 思路： 假设E表示向东走，N表示向北走 显然，任意前缀中E的个数不小于N的个数 那问题可以转换成：给定一个2n长的EN序列，要求任意前缀中E的个数不小于N的个数，问有多少种序列 易得，其解和进出栈问题如出一辙，其解等于第n个卡特兰数 其解为$\\frac{C_{2n}^{n}}{n+1}$ 8.填充阶梯图形问题描述：用n个长方形填充一个高度为n的阶梯状图形的方法个数？ 思路： 把高度为n-1的阶梯状图形，塞进高度为n的阶梯状图形，把高度为n的阶梯状图形分为几个部分。 设问题的解f(n)，其中n表示高度为n的阶梯状图形或n个长方形。 f(3)&#x3D;f(0)*f(2)+f(1)*f(1)+f(2)*f(0)&#x3D;5。 f(0)*f(2)表示：高度为3的阶梯状图形含有这两个部分，一个部分是高度为2的阶梯状图形，另外一个部分是一边为3一边为1的长方形。 f(1)*f(1)表示：高度为3的阶梯状图形含有这两个部分，都是高度为1的阶梯状图形。 结合递推式，不难发现f(n) 等于h(n)，其解等于第n个卡特兰数 其解为$\\frac{C_{2n}^{n}}{n+1}$ 9.排队问题问题描述：2n个高矮不同的人排成两队，每队n个人，要求第二排的第i个人比第一排的第i个人高，问有多少种排队方式 思路： 高矮是相对的，先排成一长队 每一个高的都有一个矮的与之对应 问题即转化成进出栈问题，高的进第二排，矮的进第一排 任意前缀和不小于0，其解为第n个卡特兰数 其解为$\\frac{C_{2n}^{n}}{n+1}$ 剩下问题： 一个汽车队在狭窄的路面上行驶，不得超车，但可以进入一个死胡同去加油，然后再插队行驶，共有n辆汽车，问共有多少种不同的方式使得车队开出城去？ 饭后，姐姐洗碗，妹妹把姐姐洗过的碗一个一个放进碗橱摞成一摞。一共有n个不同的碗，洗前也是摞成一摞的，也许因为小妹贪玩而使碗拿进碗橱不及时，姐姐则把洗过的碗摞在旁边，问：小妹摞起的碗有多少种可能的方式？ 其解都等于第n个卡特兰数 其解都是$\\frac{C_{2n}^{n}}{n+1}$ 参考博客：Sherry_Yue","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"卡特兰数","slug":"卡特兰数","permalink":"http://kjuan.xyz/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"}],"author":"六脉神剑"},{"title":"细胞图像处理","slug":"图像处理","date":"2025-04-04T03:12:28.000Z","updated":"2025-04-04T07:35:45.611Z","comments":true,"path":"2025/04/04/图像处理/","permalink":"http://kjuan.xyz/2025/04/04/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/","excerpt":"介绍图像处理流程","text":"细胞分割方法分析细胞分割方法的数学原理与实现1. 颜色空间转换 (RGB → LAB)首先将RGB图像转换为LAB颜色空间： 将RGB图像转换为LAB颜色空间。LAB空间特别适合处理H&amp;E染色的病理切片，因为它能更好地分离不同染色成分 1lab_image = color.rgb2lab(self.original_image) RGB到LAB的转换过程：步骤1: RGB到XYZ的转换对于标准RGB(sRGB)空间，首先需要进行伽马校正，将非线性RGB转换为线性RGB： $$R_{linear} &#x3D; \\begin{cases}\\frac{R_{sRGB}}{12.92}, &amp; \\text{if } R_{sRGB} \\leq 0.04045 \\\\left(\\frac{R_{sRGB} + 0.055}{1.055}\\right)^{2.4}, &amp; \\text{if } R_{sRGB} &gt; 0.04045\\end{cases}$$ 同理计算$G_{linear}$和$B_{linear}$。 然后使用标准转换矩阵将线性RGB转换为XYZ： $$\\begin{bmatrix} X \\ Y \\ Z \\end{bmatrix} &#x3D; \\begin{bmatrix}0.4124564 &amp; 0.3575761 &amp; 0.1804375 \\0.2126729 &amp; 0.7151522 &amp; 0.0721750 \\0.0193339 &amp; 0.1191920 &amp; 0.9503041\\end{bmatrix} \\begin{bmatrix} R_{linear} \\ G_{linear} \\ B_{linear} \\end{bmatrix}$$ 步骤2: XYZ到LAB的转换使用D65白点参考值$(X_n, Y_n, Z_n) &#x3D; (0.95047, 1.00000, 1.08883)$： 首先计算中间变量： $$x &#x3D; \\frac{X}{X_n}, y &#x3D; \\frac{Y}{Y_n}, z &#x3D; \\frac{Z}{Z_n}$$ 然后应用非线性变换： $$f(t) &#x3D; \\begin{cases}t^{\\frac{1}{3}}, &amp; \\text{if } t &gt; \\left(\\frac{6}{29}\\right)^3 \\\\frac{1}{3}\\left(\\frac{29}{6}\\right)^2 t + \\frac{4}{29}, &amp; \\text{if } t \\leq \\left(\\frac{6}{29}\\right)^3\\end{cases}$$ 最后计算LAB值： $$L &#x3D; 116 \\cdot f(y) - 16$$$$a &#x3D; 500 \\cdot [f(x) - f(y)]$$$$b &#x3D; 200 \\cdot [f(y) - f(z)]$$ 其中L的范围是[0, 100]，a和b的范围通常是[-128, 127]。 2. 细胞核分割提取LAB空间的通道： 该通道对H&amp;E染色的细胞核有较高的敏感度 12l_channel = lab_image[:,:,0] # 亮度通道a_channel = lab_image[:,:,1] # 从绿到红的通道 使用Otsu自适应阈值法自动确定最佳分割阈值 Otsu阈值法的数学原理：Otsu方法通过最大化类间方差来寻找最佳阈值。对于灰度图像，假设像素值范围为[0, L-1]： 计算图像的归一化直方图 $p_i &#x3D; \\frac{n_i}{N}$，其中$n_i$是灰度值为i的像素数，N是总像素数。 对于每个可能的阈值t，计算两个类的概率：$$\\omega_0(t) &#x3D; \\sum_{i&#x3D;0}^{t} p_i$$$$\\omega_1(t) &#x3D; \\sum_{i&#x3D;t+1}^{L-1} p_i &#x3D; 1 - \\omega_0(t)$$ 计算两个类的均值：$$\\mu_0(t) &#x3D; \\frac{\\sum_{i&#x3D;0}^{t} i \\cdot p_i}{\\omega_0(t)}$$$$\\mu_1(t) &#x3D; \\frac{\\sum_{i&#x3D;t+1}^{L-1} i \\cdot p_i}{\\omega_1(t)}$$ 计算总体均值：$$\\mu_T &#x3D; \\sum_{i&#x3D;0}^{L-1} i \\cdot p_i$$ 计算类间方差：$$\\sigma_B^2(t) &#x3D; \\omega_0(t) \\cdot \\omega_1(t) \\cdot [\\mu_0(t) - \\mu_1(t)]^2$$ 最佳阈值是使类间方差最大的阈值：$$t^* &#x3D; \\arg\\max_{0 \\leq t &lt; L} {\\sigma_B^2(t)}$$ 在代码中的实现： 12nuclei_thresh = filters.threshold_otsu(a_channel)nuclei_mask = a_channel &lt; nuclei_thresh 3. 形态学操作小物体移除：1nuclei_mask = morphology.remove_small_objects(nuclei_mask, min_size=50) 使用连通组件分析，移除面积小于50像素的连通区域。连通组件分析的数学表示为： 对于二值图像$I$，定义连通组件$C$为满足以下条件的像素集合： 对于任意$p, q \\in C$，存在一条路径$p &#x3D; p_0, p_1, …, p_n &#x3D; q$，使得对于所有$0 \\leq i &lt; n$，$p_i$和$p_{i+1}$是相邻的，且$I(p_i) &#x3D; I(p_{i+1}) &#x3D; 1$ 不存在$p \\in C$和$q \\notin C$使得$p$和$q$相邻且$I(q) &#x3D; 1$ 然后移除所有面积小于阈值的连通组件：$$I’(p) &#x3D; \\begin{cases}0, &amp; \\text{if } p \\in C \\text{ and } |C| &lt; \\text{min_size} \\I(p), &amp; \\text{otherwise}\\end{cases}$$ 形态学闭运算：1nuclei_mask = morphology.binary_closing(nuclei_mask, morphology.disk(2)) 闭运算是膨胀后接腐蚀的组合操作。对于二值图像$I$和结构元素$B$： 膨胀操作定义为：$$I \\oplus B &#x3D; {z \\in \\mathbb{Z}^2 | (B_z \\cap I) \\neq \\emptyset}$$其中$B_z$是将$B$平移到点$z$的结果。 腐蚀操作定义为：$$I \\ominus B &#x3D; {z \\in \\mathbb{Z}^2 | B_z \\subseteq I}$$ 闭运算则定义为：$$I \\bullet B &#x3D; (I \\oplus B) \\ominus B$$ 在这里，结构元素$B$是半径为2的圆盘，可以表示为：$$B &#x3D; {(x, y) \\in \\mathbb{Z}^2 | x^2 + y^2 \\leq 4}$$ 4. 细胞质分割 提取LAB空间的b通道，该通道对细胞质区域有较好的响应 与细胞核分割类似，但使用b通道并取大于阈值的区域： 123b_channel = lab_image[:,:,2] # 从蓝到黄的通道cytoplasm_thresh = filters.threshold_otsu(b_channel)cytoplasm_mask = b_channel &gt; cytoplasm_thresh 5. 细胞质掩码优化12cytoplasm_mask = morphology.remove_small_objects(cytoplasm_mask, min_size=100)cytoplasm_mask = morphology.binary_closing(cytoplasm_mask, morphology.disk(3)) 这里使用了更大的最小尺寸(100)和更大的结构元素(半径为3的圆盘)：$$B_{cytoplasm} &#x3D; {(x, y) \\in \\mathbb{Z}^2 | x^2 + y^2 \\leq 9}$$ 6. 整体细胞掩码创建12cell_mask = np.logical_or(nuclei_mask, cytoplasm_mask)cell_mask = morphology.binary_closing(cell_mask, morphology.disk(5)) 将细胞核和细胞质掩码通过逻辑或运算合并使用半径为5的圆形结构元素进行闭运算，确保细胞的完整性和连续性 $$\\text{cell_mask}(x, y) &#x3D; \\text{nuclei_mask}(x, y) \\lor \\text{cytoplasm_mask}(x, y)$$ 其中$\\lor$表示逻辑或操作。 闭运算使用半径为5的圆盘结构元素：$$B_{cell} &#x3D; {(x, y) \\in \\mathbb{Z}^2 | x^2 + y^2 \\leq 25}$$ 这个更大的结构元素能够填充细胞内部的空洞，并平滑细胞边界，确保细胞的完整性和连续性。&#96;&#96;&#96;","categories":[],"tags":[{"name":"图像处理","slug":"图像处理","permalink":"http://kjuan.xyz/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"author":"kjuan"},{"title":"数据结构-串","slug":"数据结构-串","date":"2025-04-02T12:04:02.000Z","updated":"2025-04-02T16:47:01.726Z","comments":true,"path":"2025/04/02/数据结构-串/","permalink":"http://kjuan.xyz/2025/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%B2/","excerpt":"介绍串的基本概念，存储结构，匹配算法","text":"📚 串的定义基本概念 术语 描述 字符串 由0个或多个字符组成的有限序列，又称串 空串 长度为0的字符串（仍是合法子串） 主串 包含其他子串的字符串 子串 主串中任意连续字符组成的子序列 示例代码： 12S = &quot;IPhone 16 pro max&quot;S1 = &quot;pro&quot; # S1是S的子串，空串也是S的子串 ✨ 核心特性 字符串是特殊的线性表，数据对象限定为字符集（如ASCII、Unicode） 基本操作通常以子串为操作对象（非单个字符） 🎯 位置说明 概念 描述 示例 字符位置 字符在串中的序号（从1开始） &#39;h&#39;在S中的位置为3 子串位置 子串首字符在主串中的位置 &quot;one&quot;在S中的位置为4 🗄️ 串的存储结构顺序存储12345#define maxlen 20typedef struct &#123; char ch[maxlen]; int length;&#125; SString; 链式存储1234typedef struct StringNode &#123; char ch; struct StringNode *next;&#125; StringNode, *String; 🔍 存储方案对比顺序存储 优点：支持随机存取，存储密度大 缺点：扩展容量不方便，插入删除不方便 链式存储 优点：扩展容量分布，插入删除方便 缺点：不支持随机存取，指针占额外空间，存储密度小 🛠️ 串的基本操作核心操作流程图 1. 求子串操作1234567891011SString SubString(SString S, int pos, int len) &#123; SString sub; if (pos + len - 1 &gt; S.length) &#123; // 错误处理 &#125; for (int i = 0; i &lt; len; i++) &#123; sub.ch[i] = S.ch[pos + i - 1]; &#125; sub.length = len; return sub;&#125; 2. 字符串比较 3. 模式匹配 🔍 模式匹配算法 子串：主串的一部分，一定能在主串中找到模式串：不一定能在主串中找到 朴素模式匹配算法思想 主串S长度为n，模式串T长度为m 需要比较的次数为n-m+1 每次比较，i指向S，j指向T，i++，j++，依次匹配 如果遇到不匹配的字符 S需要从下一个位置开始，即i&#x3D;i-j+2 T需要从头开始，即j&#x3D;0 如果j&gt;T.length，则表示匹配成功，返回i-T.length 时间复杂度分析 最佳情况，O(m)，第一次遍历成功 最差情况，O((n-m+1)*m)，每次都在最后一个字符匹配失败 平均情况，O(m+n) 空间复杂度，O(1)，只用固定数量的指针变量 🚀 KMP算法 由D.E.Knuth, J.H.Morris, V.R.Pratt提出，在朴素匹配算法的基础上改进 思路： 主串S，模式串T 当匹配到i个位置，发现不匹配 但主串S前面i-1个位置是匹配的，我们可以知道其具体内容 就可以选择某个位置进行下一次匹配，避免无效匹配 这个具体位置怎么表示，就是要探讨的内容 可以发现，到第i个位置不匹配，但主串前i-1个字符是已知的 主串不需要回溯，只需要模式串选择合适的位置j继续匹配 模式串指针和主串无关，只和自身有关 其值刚好可以用一个数组表示，表示为next[] next数组构建： 123456789101112void get_next(String T, int next[]) &#123; int i = 1, j = 0; next[1] = 0; while (i &lt; T.length) &#123; if (j == 0 || T.ch[i] == T.ch[j]) &#123; ++i; ++j; next[i] = j; &#125; else &#123; j = next[j]; &#125; &#125;&#125; KMP算法的实现 模式串’abaabc’的next数组： j 1 2 3 4 5 6 next[j] 0 1 1 2 2 3 对于模式串’abaabc’ 若第一个位置不匹配，令j&#x3D;0， i++,j++再匹配 第二个，令j&#x3D;1， i不变，继续匹配 第三个，令j&#x3D;1， i不变，继续匹配 第四个，令j&#x3D;2， i不变，继续匹配 第五个，令j&#x3D;2， i不变，继续匹配 第六个，令j&#x3D;3， i不变，继续匹配 ⚡ KMP优化（nextval数组）优化策略： 利用next数组匹配模式串时，当第i个字符不匹配，主串位置不变，模式串回到next[i]位置，此方法仅考虑前i-1个字符匹配情况 实际上，第i个字符不匹配，我们可以确定第i个字符一定不是m[i]，如果模式串回到next[i]位置，而该位置恰好为m[i]，这个匹配显然是多余的 在next数组的基础上，推出nextval数组，降低时间复杂度 123456789101112131415void get_nextval(String T, int nextval[]) &#123; int i = 1, j = 0; nextval[1] = 0; while (i &lt; T.length) &#123; if (j == 0 || T.ch[i] == T.ch[j]) &#123; ++i; ++j; if (T.ch[i] != T.ch[j]) nextval[i] = j; else nextval[i] = nextval[j]; &#125; else &#123; j = nextval[j]; &#125; &#125;&#125; 算法思路 nextval[1]一定为0 当T.ch[j]&#x3D;&#x3D;T.ch[next[j]]，说明当前匹配是多余的，就算回到next[i]位置，依然不匹配 nextval[j]&#x3D;nextval[next[j]] 其余让nextval[j]&#x3D;next[j] 📌 关键总结 存储选择：顺序存储适合静态场景，链式存储适合动态场景 模式匹配：KMP通过预处理将时间复杂度优化到O(n+m) 算法优化：nextval数组避免重复无效匹配 实践要点：注意字符串终止符’\\0’的处理和长度校验","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"学习笔记","slug":"数据结构/学习笔记","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"串","slug":"串","permalink":"http://kjuan.xyz/tags/%E4%B8%B2/"}],"author":"k卷"},{"title":"钢铁与血火：斯大林传记","slug":"斯大林传","date":"2025-04-01T16:00:00.000Z","updated":"2025-04-04T03:29:27.726Z","comments":true,"path":"2025/04/02/斯大林传/","permalink":"http://kjuan.xyz/2025/04/02/%E6%96%AF%E5%A4%A7%E6%9E%97%E4%BC%A0/","excerpt":"介绍Stalin同志不平凡的一生","text":"/* 主标题样式 - 霸气澎湃风格 */ h1 { font-family: \"Times New Roman\", Times, serif; font-size: 3.2em; font-weight: 800; text-transform: uppercase; letter-spacing: 3px; color: #1a1a1a; text-align: center; margin: 1.5em 0; padding: 0.5em 0; position: relative; text-shadow: 2px 2px 3px rgba(0,0,0,0.2); border-top: 3px solid #8b0000; border-bottom: 3px solid #8b0000; } /* 主标题装饰元素 */ h1::before, h1::after { content: \"★\"; color: #8b0000; font-size: 0.5em; position: absolute; top: 50%; transform: translateY(-50%); } h1::before { left: 20%; } h1::after { right: 20%; } /* 章节标题样式保持不变 */ h2 { font-family: \"Times New Roman\", Times, serif; font-size: 2.2em; font-weight: 700; letter-spacing: 2px; color: #2b2b2b; margin-top: 2em; margin-bottom: 1em; text-align: center; position: relative; padding-bottom: 0.5em; } h2::after { content: \"\"; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 150px; height: 3px; background: linear-gradient(to right, transparent, #8b0000, transparent); } 钢铁与血火：斯大林传记前言&emsp;&emsp;约瑟夫·斯大林，格鲁吉亚鞋匠之子，少时读神学而怀异心，十月革命时不过一介执笔书生，二十载后终成钢铁洪流中掌舵之人。当他的烟斗火星在《苏德互不侵犯条约》上烙下签名时，半个世界的命运正随其指节作响而震颤——这具被伏尔加河伏特加与第比利斯风雪淬炼的身躯，最终在人类文明的穹顶之下熔铸成钢铁巨像，其阴影从西班牙内战的战壕延伸至朝鲜半岛的38度线。 &emsp;&emsp;从第比利斯神学院的叛逆学生，到掌控全球六分之一陆地的红色沙皇，斯大林的一生是20世纪最暴烈的权力寓言。他像炼金术士般将国际主义理想与帝国野心熔铸一体，用五年计划的钢水浇灌出T-34坦克集群，以古拉格劳改营的骸骨堆砌起第聂伯河水电站。当1941年德军兵临莫斯科时，他在红场阅兵式上的怒吼，与1937年签署处决图哈切夫斯基命令时的笔迹，竟出自同一双颤抖的手。 &emsp;&emsp;毛泽东曾以”三七开”喻之：七分是锻造出T-34坦克集群的铸剑师，用五年计划的钢水浇灌出抵御纳粹的盾牌；三分是深陷”历史周期律”的独裁者，让国际主义的理想在个人崇拜的祭坛上蒙尘。丘吉尔谓之”接过木犁的国度，留下核武库的暴君”，赫鲁晓夫在秘密报告中痛陈”用鲜血浸透的权杖”，而柏林国会大厦废墟上的弹痕至今仍在低语——正是这柄铁腕铸就的剑，斩断了更黑暗的纳粹巨兽。 &emsp;&emsp;在克里姆林宫地下档案库第7号密柜中，封存着一份1932年的政治局会议记录——斯大林用红铅笔划掉了”集体化导致乌克兰饥荒”的汇报，在页脚批注：”历史由胜利者书写”。这位将名字（”钢铁之人”）化作国家命运的格鲁吉亚人，一生都在用鲜血与谎言锻造两种现实：一种是《真理报》头版上光芒万丈的”各族人民的父亲”，另一种是深夜审讯室里被强光照射的”人民公敌”档案照。 &emsp;&emsp;本书试图穿越这双重镜像，还原一个真实的斯大林：他是如何用大清洗的350万颗子弹，铸造出抵御纳粹的钢铁洪流？为何他一面签署《苏日中立条约》背弃中国抗日战场，一面又默许对延安的秘密军援？当1945年朱可夫将红旗插上柏林国会大厦时，这位统帅为何在庆功宴上突然离席，独自焚烧了华西列夫斯基提交的阵亡名单？ &emsp;&emsp;虽然本人是斯大林的忠实支持者，但本书力求从客观的角度出发，以科学性和真实性为原则，全面探讨相关历史背景与事件。我们将深入分析斯大林在各个时期的政策和影响，旨在提供一个全面且公正的视角，而非单一的赞美或批判。希望读者能够通过本书，准确理解这一复杂而重要的历史人物及其在世界历史中的地位，至于他的是与非，对与错，成与败，交由读者去评判。 &emsp;&emsp;历史正坐在审判席上，等待后来者的质询。 第一章 赤焰初燃：俄版觉醒年代&emsp;&emsp;那是一个压抑而又疯狂，保守而又浪漫的时代，青年们因为共同的理想而聚首，托洛茨基为那个时代写下最好的注释：在当年，委员会和党这样的字眼，对于年轻人就像是美妙的音乐，他们风云际会，每个人都知道等待自己的是监狱和流放，可他们无所畏惧，并以此为荣。 在当年，委员会和党这样的字眼，对于年轻人就像是美妙的音乐，他们风云际会，每个人都知道等待自己的是监狱和流放，可他们无所畏惧，并以此为荣。 ——列夫·托洛茨基 &emsp;&emsp;当第比利斯神学院的烛光最后一次照亮《圣经》扉页时，19岁的斯大林将拉丁文赞美诗撕碎成传单，踏着高加索山麓的月光潜入巴统炼油厂——这个被开除的优等生，正用教会斯拉夫语向码头工人解读《共产党宣言》，让石油桶里的密信随里海货轮点燃整个高加索。化名”科巴”的他，在哥萨克骑兵追捕中策划银行劫案，用马车铃铛声掩盖炸药计时器的滴答；把教堂铜钟熔铸成刻着《以赛亚书》的弹壳，让神学辩证法在街垒战中淬炼为革命战术，斯大林将革命之火燃遍他走过的每一个地方。 &emsp;&emsp;1905年，腐朽的沙俄帝国已经摇摇欲坠，日俄战争的失败更是加速了他的灭亡，1905年俄国革命爆发，这场混乱不堪的革命最终失败，但也为十二年后的那场革命埋下伏笔。 &emsp;&emsp;也是在1905年，斯大林遇到了他的真爱，叶卡捷琳娜·斯瓦尼泽，斯大林颠沛流离的革命生活注定让这感情很难长久，他整天忙着去发动罢工和武装斗争，等到发现妻子病重时，一切为时已晚，斯瓦尼泽死在斯大林怀里，她和斯大林只做了一年的夫妻，斯大林悲痛欲绝，那年他29岁，他终于明白自己走上的是一条怎样的道路，这条路充满悲剧与痛苦，注定要让他失去太多，他的心变得像钢铁一样坚硬。他对朋友说：”现在我的生命里只剩下社会主义了，我要把我的一生都献给它”，可谓是在”一朝悟道见真我，昔日枷锁皆云烟”。 &emsp;&emsp;当时布尔什维克党内，托洛茨基演讲如火山喷发，列宁《四月提纲》似惊雷裂空，《真理报》创建成功后，斯大林在上面发表《马克思主义和民族问题》一文，这是他第一次使用Stalin这个笔名，也就是斯大林，意为钢铁之人，在他的余生中，他表现出的钢铁般的意志与手腕，无一不是在呼应这个名字。 &emsp;&emsp;钢铁淬火需经千度炙烤，命运予这”钢铁之人”的试炼来得恰如其分。1903至1917十四年间，他五度被放逐：初次流放西伯利亚新乌达村，雪夜策马穿越雪原成功脱逃；二次发配至索利维切戈茨克，又伪装水手沿北德维纳河遁走。最严厉当属1913年流放图鲁汉斯克边疆区，呵气成霜的极寒中，他与斯维尔德洛夫共居木屋，每日凿冰取水，冰镐起落间，马克思主义的火种竟在永夜之地悄然滋长。最后一次流放恰逢1917年二月革命，二月革命的惊雷已震碎罗曼诺夫王朝的黄昏。般淬炼，非但未折其志，反将多疑淬成权谋的锋刃，冷酷锻作铁腕的徽章，恰似伏尔加河底的燧石，越是冲刷越是棱角峥嵘。 &emsp;&emsp;斯大林在西伯利亚农场悟道，多年后，斯大林大权在握，他在西伯利亚建立古格拉集中营，把成千上万的人流放到那里，他清楚地知道那是个什么地方，恰似历史开出的残酷玩笑：昔日的脱逃者，如今成了更精明的狱卒。 &emsp;&emsp;1917年2月，二月革命爆发，俄罗斯帝国在战争与饥荒中崩塌，尼古拉二世退位诏书上的墨迹未干，临时政府已陷入继续战争的泥潭。 &emsp;&emsp;儒略历10月25日（公历11月7日），以列宁为首的布尔什维克党发动十月革命，推翻临时政府，建立苏维埃俄国。 &emsp;&emsp;当冬宫的硝烟尚未散尽，斯大林已站在权力中枢的门槛。时年三十九岁的他，回望来路：第比利斯神学院的圣像烛影下偷读禁书，巴库油田罢工浪潮中奔走联络，西伯利亚流放地的暴风雪里锤炼筋骨——那些炽热的革命岁月，此刻都凝成克里姆林宫走廊壁灯投下的细长阴影。昔日与列宁彻夜辩论真理的年轻理论家，如今位列七人政治局，掌民族事务人民委员之印。革命的罗曼蒂克已然谢幕，取而代之的是钢铁般的现实政治：未来三十六载，他将以整个欧亚大陆为锻炉，先破十四国铁壁合围，再斩同袍于权力祭坛，终与罗斯福、丘吉尔、希特勒等当代传奇人物同台博弈。历史的天平在此刻微微颤动，这个格鲁吉亚皮匠之子即将改写二十世纪的政治方程式。 第二章 暗夜突围：革命学徒的淬炼&emsp;&emsp;1918年3月，苏维埃俄国与德意志帝国签订《布列斯特和约》，退出一战，此举虽保全新生政权，却以割让百万平方公里疆域为代价，在协约国的震怒中赢得短暂喘息。 &emsp;&emsp;1918年11月，德意志第二帝国轰然倒塌，一战结束，英法美等国对俄国单方面退出对德战争不满，以及俄国债务等问题，对俄国革命进行武装干涉。英法美等国的军舰已悄然横亘于摩尔曼斯克港口，日军铁蹄踏碎符拉迪沃斯托克的黎明，十四国干涉军与白卫势力的合围之势如寒潮般席卷新生政权。 &emsp;&emsp;在俄国内战中，斯大林如救火队员，被调往各地处理棘手的事物，在圣彼得堡他镇压叛乱，击退尤登尼奇（白军西线领导人）的大军，在南方战线，他组建了第一骑兵军，这是一支传奇的军队，部分高层如下：师长铁木辛哥，罗科索夫斯基，政委伏罗希洛夫，军长布琼尼，团长朱可夫，这五人 Later都成为苏联元帅（二战期间苏联授勋的元帅仅有十余位），这支由未来的五位元帅共同锻造的骑兵集团，在1919年秋的奥廖尔-克罗梅战役中，以三昼夜强行军300公里的速度撕裂邓尼金防线。 &emsp;&emsp;在形势逐渐朝着向红军有利的方向发展时，波兰突然参战了，1919年2月，苏波战争爆发，波兰军队一开始占据上风，一度占领了基辅，但在红军集结好后，又被红军反推，退回了波兰境内，对于要不要越过边境攻打波兰，苏俄高层产生了分歧，斯大林和托洛茨基都反对攻打波兰，一方面红军已经疲惫，继续进攻也会导致补给线过长，另一方面战争性质也会从自卫变成入侵，但列宁有别的想法，他想的是世界革命，在世界革命描绘的蓝图里，全世界无产阶级会联合起来，共同推翻资产阶级，先夺取政权的无产阶级，会帮助其他还被压迫的无产阶级获得解放，革命风暴席卷全球，赤旗插遍世界，阶级斗争永不停歇，直到最后一个资本主义国家也走上共产主义道路。 &emsp;&emsp;当红军在1920年5月收复基辅时，华沙的教堂钟声已隐约可闻。列宁在克里姆林宫高举战报，向政治局委员们描绘蓝图：”拿下华沙，德国无产阶级就会打开国门，接下来整个欧洲都将铺满红色地毯！”，列宁和许多人都觉得自己无比接近这个梦想，他们想的是攻占华沙，解放波兰，这样就能进入德国，支援德国革命，如果连德国都变成了共产主义国家，那还有什么能阻止他们呢？接下来就是英国，法国，全世界都会被红色浪潮所淹没。 &emsp;&emsp;理想很丰满，现实很骨感，只有当资本主义国家走到了末路，阶级矛盾远远大于民族矛盾，所有无产阶级被一种强烈的国际主义精神团结在一起的时候，世界革命才能实现，当红军以解放之名进攻波兰时，他们失望地发现，波兰的工人，农民，士兵，并没有站在俄国无产阶级这一边，而是被民族主义和爱国主义所激发，团结抵御外来者，波兰人完全有理由怀疑他们是入侵者而不是解放者，当红军战士怀揣德俄双语《告欧洲无产者书》跨过布格河，迎接他们的不是波兰工人的拥抱，而是农民挥舞的镰刀和神父高举的十字架。 &emsp;&emsp;一边是波兰人的顽强抵抗，另一边红军内部也出现了一系列变故，华沙城下的战局瞬息万变：图哈切夫斯基的无线电密令被波兰数学家雅尼科夫斯基破译，波军统帅毕苏斯基趁机将主力迂回至红军侧翼。此刻，布琼尼的第一骑兵军正在利沃夫街头与市民争夺马饲料，斯大林以”巩固乌克兰苏维埃”由拒绝分兵支援图哈切夫斯基。当8月16日波军发动”维斯瓦河奇迹”反攻时，红军前锋部队的弹药箱里只剩传单——印着德俄双语的世界革命宣言，在波兰民兵的刺刀下散落成泥泞中的废纸，一系列的失误，造成灾难性的后果，导致红军兵败华沙，得以签订合约罢兵言和。但斯大林没有忘记波兰的入侵，在二战中，他参与瓜分波兰，制造卡廷惨案，向波兰人展示自己冷酷无情的一面。 &emsp;&emsp;由于白军内部势力争夺，矛盾激烈，内斗不断，经过四年的俄国内战，历经察里津保卫战的淬炼与西伯利亚远征的洗礼，当1921年春雪消融时，红军战旗已插遍从波罗的海到符拉迪沃斯托克的广袤疆域，布尔什维克领导的红军击败白军。这场持续四载的生死博弈，不仅击碎了十四国刺刀构筑的封锁链，更以200万平方公里焦土为熔炉，锻造出崭新的国家形态。 &emsp;&emsp;1922年12月，俄罗斯，乌克兰，白俄罗斯，外高加索签订《苏联成立条约》，组成苏维埃社会主义共和国联盟，这个名叫苏联的国家开始登上国际舞台，它注定改变世界。 第三章 红镰裂变：理想国的血色黄昏&emsp;&emsp;十月革命后的这五年岁月里，深刻印象了斯大林，柏林一月起义的街垒在1919年被自由军团碾碎，匈牙利苏维埃共和国的红旗在布达佩斯议会大厦飘扬仅133天，意大利都灵的工厂委员会在资本家反扑下瓦解，斯大林目睹红色浪潮在欧陆涨落，最终在1920年华沙城外的溃败中彻悟：世界革命的预言如同维斯瓦河的晨雾，日出即散，苏维埃俄国不过是资本主义汪洋中的孤岛。他意识到资本主义在很多国家还有生命力，而十月革命的成功是幸运的，罕见的，相比于不断对外输出革命，斯大林更关注于对本国的建设，最终提出了一国社会主义论，他认为社会主义要首先在一个国家内建成，这与托洛茨基的不断革命论截然相反，为两人 later冲突埋下伏笔。 &emsp;&emsp;1918年《布列斯特和约》的争论，在斯大林心中烙下深刻印记。当布哈林主张继续”革命战争”获得多数支持时，斯大林冷笑：”多数人的狂热会葬送革命”。历史证明，斯大林 advocated 的妥协虽不完美，却保全了新生政权——这让他确信真理并不掌握在多数人手中。在察里津他集权于一身，党政军一把抓，任务圆满完成，保证了粮食往前线的供应，也守住了察里津，这让斯大林越来越相信，他比大多数人更能作出正确的选择，高效决策胜过无休止的辩论，斯大林的集权和独裁倾向逐渐加强。 &emsp;&emsp;列宁病榻上的最后目光，见证着权力走廊里的无声革命。列宁于1924年逝世后，斯大林逐步清除党内对手，斯大林先以”三驾马车”联盟，将托洛茨基逐出革命军事委员会；再借布哈林之笔，将季诺维耶夫、加米涅夫钉上”新反对派”的耻辱柱；最终在1929年四月全会上，连布哈林”像小孩般啜泣”的辩解也沦为权力祭坛的余烬。这场没有硝烟的战争里，《真理报》的社论取代了枪炮，政治局会议记录比战场捷报更致命。至此，苏联正式进入斯大林主导的时代，集体化与工业化进程即将拉开帷幕。 第四章 钢铁涅槃：大林的工业化抉择&emsp;&emsp;当斯大林在1924年接过千疮百孔的苏联时，这个国家正深陷历史性的绝境——卢布暴跌至战前价值的0.08%，工厂烟囱如同折断的肋骨般沉寂，西方六国联合绞杀令让红色政权在资本主义汪洋中摇摇欲坠。面对残局，他叩击政治局会议桌的闷响如同末日钟摆：”十年，要么锻造出抵挡钢铁洪流的盾牌，要么化作历史车轮下的尘埃。”，这位格鲁吉亚铁匠之子在1931年掷下惊世赌注：以工农业剪刀差为杠杆，将1.2亿农民捆上集体农庄的齿轮，用乌克兰黑土地里榨出的4800万吨粮食换取第聂伯河水电站的涡轮轰鸣，让马格尼托格尔斯克钢铁厂的高炉夜以继日吞噬乌拉尔矿石。 &emsp;&emsp;斯大林的思路总结出来就是为了国家的整体发展，先牺牲掉一部分人的利益，将大量资源向工业倾斜，快速实现工业化，只有工业化才能壮大苏联的国防力量，保证苏联在新一轮世界大战中取胜，工业化也会带来生产力的全面提升，最终惠及所有人。 &emsp;&emsp;但这要不可避免地牺牲农民利益，当斯大林的征粮队在1932年秋横扫乌克兰平原时，黑土地上的金色麦浪正化作死亡浪潮。在”消灭富农”的指令下，85万乌克兰农民被贴上阶级标签，像货物般塞进开往西伯利亚的牲口车厢——他们中不乏仅因拥有两头奶牛就被定为”富农”的贫苦农户。集体农庄的账本上，粮食征收量被机械地设定为前五年平均产量的150%，即便干旱已让第聂伯河水位降至百年最低。1933年春季，乌克兰乡村的樱桃树开满白花时，路边倒毙的饥民胃里只剩树皮与黏土。这场被称作”霍洛多摩尔”（饥荒灭绝）的灾难，即 Ukraine 大饥荒，最终让400万灵魂消逝在曾经欧洲最肥沃的黑土地上。 &emsp;&emsp;在历史的十字路口，斯大林选择了唯一正确的一条路，第一个五年计划的成就是卓越的，苏联国民收入增加了85%，人均国民生产总值增加了79%，工业总产值增加118%，这种幅度的提升在人类之前的历史中是从来没有出现过的。西方资本主义国家惊讶的发现，苏联正在以前所未有的速度追上他们，1932年纽约股市崩盘的硝烟中，斯大林格勒拖拉机厂正以每30分钟一台的速度，将钢铁巨兽投入集体农庄的冻土，那一刻他们终于明白了马克思和列宁所构想的国家究竟能爆发出多大的潜力。 第五章 肃反纪年：钢铁领袖的血色风暴&emsp;&emsp;就像是一种惩罚一样，1932年11月8日，当乌克兰的饥民在哈尔科夫街头吞食黏土时，克里姆林宫内的枪声击碎了斯大林生命最后的温情，32岁的娜杰日达·阿利卢耶娃——斯大林的第二任妻子，因为争执，用托卡列夫手枪结束了自己的生命。在新圣母公墓的寒风中，斯大林的手指深深嵌入棺木边缘，警卫员听见他反复呢喃：”我没能保护好…”。斯大林高居权力之巅，但他却绝望地发现他其实连自己的妻子都保护不了，娜杰日达的死带走了斯大林内心的最后一点温柔，他再也没有结婚，也没有了个人生活，他将几乎所有时间都投入到工作里，一个冷酷固执的斯大林出现了，他决定将苏联带上他认定的方向，任何阻止他的人都会被他无情的碾碎。 &emsp;&emsp;1934年12月1日，列宁格勒斯莫尔尼宫走廊的枪声引爆了苏联最黑暗的篇章——政治局委员基洛夫（大林的坚定支持者）后脑中弹身亡，而后其保镖离奇死于”刹车失灵”，这起迷雾重重的刺杀案彻底点燃了斯大林的猜忌。当内务部宣称凶手尼古拉耶夫是”因失业报复社会”的独狼时，斯大林在政治局会议上摔碎茶杯：”他们当我是傻子！”此刻的档案柜里，托洛茨基流亡墨西哥的信件、图哈切夫斯基访问德国的照片、布哈林的经济学手稿，全被视作阴谋网络的证据。他在电报空白处批示：”彻查！敌人在我们心脏！”，斯大林对此大做文章，全苏联的宣传机器被调动起来，人民群众得到的消息是：那些失势的反派们，谋杀了基洛夫，甚至还想谋杀总书记斯大林。 &emsp;&emsp;大清洗的齿轮开始疯狂转动：1936年8月叶若夫接掌内务部后，莫斯科卢比扬卡监狱的探照灯再未熄灭——5位开国元帅被枪决3人，16位集团军司令处决15人，8万红军军官有3.5万人被处决或流放。当1938年清洗达到顶峰时，全苏日均处决人数突破800，列宁时期的政治局委员仅斯大林幸存，十七大中央委员71%被枪决。这场以”铲除反革命”为名的运动，最终演变成自噬革命元勋的绞肉机：数学家因计算圆周率被指”暗通几何法西斯”，农庄主席因超额完成征粮被控”破坏经济”，海军司令收藏的日本邮票竟成”叛国铁证”。 &emsp;&emsp;提及到苏联军官，在此还要稍费笔墨说明一二：西方军官军衔分为四等：元帅，将官，校官，尉官。元帅：军队中的最高军衔，行统帅三军之事，获得者凤毛麟角；将官：苏联将官有四级，分为大将，上将，中将，少将，少将指挥师级单位，中将指挥军级单位，上将指挥千军万马自然不在话下；校官：分三级，上校，中校，少校；尉官：分四级，大尉，上尉，中尉，少尉。 &emsp;&emsp;这里就以图哈切夫斯基为例，图哈切夫斯基，苏联红军的璀璨将星，在俄国革命的烽火中崭露头角，随即成为红军的中流砥柱，1918年担任方面军司令，1920年晋升西部战线司令，1925年升任苏联红军总参谋长，1935年荣升元帅。无论是闪电般的战略打击，还是冷静应对战场的瞬息万变，他总能以无与伦比的智慧与勇气，带领部队在沙场上取得胜利，斯大林赞扬其为”小拿破仑”。然而，命运的捉弄让他最终走向了悲剧的终点，1937年5月24日深夜，被誉为”红色拿破仑”的图哈切夫斯基元帅在莫斯科公寓被捕。内务部特工破门而入时，他正在书房批注《纵深作战理论》手稿，案头还摊开着与德国国防军交流时的战术推演图——这些学术笔记三日后被扭曲为”通敌铁证”。加上德国盖世太保伪造的”密信”，图哈切夫斯基百口莫辩，连续11天的严刑拷打，这位元帅屈打成招，承认莫须有的罪名，次日被处决，直到1956年苏共二十大，才得以平反。 &emsp;&emsp;大清洗制造了大量的冤假错案，使成千上万的人蒙冤受害，他严重破坏了苏联的法制制度、政治生态、军队结构，给苏联社会留下了难以弥合的创伤。他是斯大林一生无法抹去的黑点，也是苏联历史上挥之不去的阴影。 &emsp;&emsp;在大清洗结束的1939年，斯大林目光所及之处，异议的棱角已被彻底磨平，从某种角度来说，他和苏联融为了一体，他的意志就是国家的意志，他的战略就是国家的战略，他如臂使指的调动着整个国家走向命中注定的那场大战。 第六章 铁幕对决：大战维也纳落榜美术生&emsp;&emsp;1939年盛夏，欧洲笼罩在战争阴云下。斯大林凝视着克里姆林宫内的东欧地图，深陷两难境地：苏联军队尚未从大清洗的创伤中恢复，而西面是蠢蠢欲动的纳粹德国，东面又遭日本在诺门罕挑起战事。尽管英、法、苏三国自4月起展开军事谈判，但英法对苏联提出的集体安全方案形同虚设，甚至要求苏联单独承担对德作战义务。1939年8月20日深夜，当希特勒的电报抵达克里姆林宫时，斯大林正用红铅笔圈划着《真理报》上西班牙内战的报道。电报机齿轮仍在发烫，元首的字句已暴露饥渴：”莫斯科的夏夜适合缔造和平奇迹。”斯大林凝视着东欧地图上波兰的轮廓，嘴角浮起冷笑——这个被英法出卖的国度，即将成为新秩序的祭品。1939年8月23日，原本被认为是死对头的苏德，竟然签订了《苏德互不侵犯条约》（莫洛托夫——里宾特洛条约，两外交部长名字结合体）。 &emsp;&emsp;1939年9月1日，德国闪击波兰，第二次世界大战爆发，当德军铁蹄踏碎华沙城墙时，苏联红军的T-26坦克集群从东线碾过波兰边境——斯大林用一纸《苏德互不侵犯条约》，将沙俄帝国二十年前丢失的西乌克兰、西白俄罗斯尽数收回。在此后的两年里，苏联横扫东欧北极，芬兰，波罗的海三国，恢复了昔日沙俄帝国庞大的领土。从这一刻起，斯大林不仅是列宁的继承人，他还是彼得大帝和叶卡捷琳娜大帝的继承人，他身上同时带有马列主义和大国沙文主义的色彩，这种结合让他将苏联推向了一个史无前例的巅峰，也让他走上了修正主义的歧路。 &emsp;&emsp;在二十世纪三十年代全球绥靖主义的飓风眼中，斯大林的外交博弈堪称一曲冷酷的地缘政治狂想曲。当英国海军大臣在唐宁街幻想”祸水东引”，当法国总理在爱丽舍宫祈祷”西线无战事”时，斯大林用两步棋解开了套在苏联脖颈上的双重绞索：西线通过与纳粹德国秘密瓜分东欧，将”祸水西推”至英法传统势力范围；东线以承认伪满洲国和让渡中东铁路为代价，换取日本承认蒙古人民共和国并解除远东威胁。这虽然是对法西斯的纵容，但站在苏联人的角度上看，斯大林正是纵横捭阖的天才，相比于其他国家的绥靖政策，斯大林让苏联获得了实实在在的好处，斯大林的损人利己固然不值得称赞，但相比张伯伦的损人又不利己，还是要高明一些的。 &emsp;&emsp;斯大林当然很清楚，苏德之间早晚必有一战，他吞并波罗的海三国就是为了建立起一个对德国的缓冲地带，但他完全没有想到的是德国的进攻会来得这么快。当时德国正对英作战，斯大林不相信德国会将自己陷入两线作战的泥潭。正所谓兵者，诡道也，希特勒的欺诈艺术在此刻达到巅峰：他让斯大林眼看自己的战略逻辑被逆向利用——英国未陷落、美国未参战的”安全窗口期”，恰恰成为闪击战的最佳掩护。希特勒亲自向斯大林写信，让他更加坚信德军在东线的集结不过是军事演习，当德军的飞机驶入苏联境内时，斯大林还下令：”不得挑衅，避免给希特勒提供开战借口”。当西南方面军的溃败电报如雪片般飞来时，斯大林的自负和骄傲都被打得粉碎，悔恨与羞愧充满了斯大林的内心，这位钢铁领袖终于摘下理论家的眼镜，看清了现实政治的狰狞面目，他将独断专行的一面收敛了起来，开始认真反反思自己，倾听他人的意见。正如华西列夫斯基在回忆录中所述：”6月22日的炮火，将那个刚愎的格鲁吉亚人熔炼成了真正的最高统帅。”，总参谋部作战室里总能看到斯大林披着大衣的身影——他不再用教条驳斥朱可夫的撤退建议，而是沉默地在地图上标注反击箭头，他清楚地知道，他要面对的是整个德意志第三帝国的冲击。 &emsp;&emsp;1941年6月22日，德国撕毁《苏德互不侵犯条约》，以550万兵力向苏联发起进攻，行动代号”巴巴罗萨”，这里上演着现代战争史上最骇人的钢铁洪流。毫无准备的苏联红军根本无力抵挡德军闪电般的攻势，古德里安的第2装甲集群撕开布列斯特要塞时，800架苏军战机仍在明斯克的跑道上沉睡——它们被严令禁止起飞以免”挑衅德军”。克莱斯特的第1装甲集团军强渡第聂伯河时，西南方面军的T-34坦克竟因缺乏燃油在车库里生锈。在法国波兰上演过的戏码再一次出现，德军如入无人之境，闪电战的獠牙在苏联大地划出三道血痕：德国北方集团军群18天推进650公里，将苏联波罗的海特别军区24个师击溃，德国中央集团军群在明斯克-斯摩棱斯克走廊吞噬30万红军，德国南方集团军群更是在基辅战役中俘虏66万红军。当德军侦察营望见克里姆林宫尖顶的鎏金十字架时，希特勒在”狼穴”指挥部挥舞着战报宣称：”我们只需踢开破门，整个腐朽的苏维埃联盟就会轰然倒塌。” &emsp;&emsp;当德军兵临莫斯科城下时，斯大林拒绝转移到后方，1941年11月7日清晨，莫斯科河上的薄雾凝结成冰晶，克里姆林宫塔尖的温度计指向零下25度。斯大林站在列宁墓观礼台的暗红色花岗岩上，望着广场上刺刀组成的钢铁森林——这是人类战争史上最悲壮的阅兵，这场”死亡阅兵”的幕后，是斯大林用烟斗敲着总参谋部地图下达的三道铁令：所有受阅部队必须实弹受检、所有参阅装备立即投入战场、所有防空部队进入最高战备。斯大林用格鲁吉亚口音的俄语发出震颤历史的宣言：”让伟大列宁的胜利旗帜指引你们！”这场用勇气对抗钢铁的豪赌，不仅让《时代》周刊将斯大林评为年度风云人物，更在人类精神史上刻下永恒的坐标——当国家命运悬于一线时，领袖与士兵共同挺立的姿态，本身就是最锋利的刺刀。 &emsp;&emsp;苏联红军高呼：我们已没有退路，因为身后就是莫斯科。 &emsp;&emsp;1941年12月的莫斯科郊外，零下40度的严寒将纳粹的战争机器冻成了一块块废铁。希特勒的中央集团军群虽然将望远镜的十字线对准了克里姆林宫尖顶，却不知自己正踏入斯大林精心设计的”死亡陷阱”——朱可夫在莫斯科以西构筑的三道同心圆防线，恰似套在德军脖颈上的三重绞索：外层由16个新编集团军在沃洛科拉姆斯克至图拉展开钳形防御；中层依托莫斯科运河构筑混凝土工事群；内层则是用无轨电车和机床改造的街垒工事。希特勒引以为傲的德国战车最终熄fired，他们最近的时候距离红场只有22.8公里，莫斯科就在眼前，但他们却再也无法前进一步。而当他们停下的时候，苏联红军吹响了反攻的号角，100个新锐师如雪崩般扑向精疲力尽的德军，T-34坦克群碾过冻硬的尸体冲向西方，被严寒冻僵的德国炮兵甚至来不及给火炮解冻。德军被击退了350公里，从这一刻起，苏联红军以莫斯科为起点，以柏林为终点，吹起了反攻的号角。 天降猛男朱可夫，银装素裹，优势在我！ &emsp;&emsp;斯大林战前的工业化豪赌已化作吞噬第三帝国的钢铁熔炉，T-34坦克，波波沙冲锋枪，喀秋莎火箭炮，这些精良的武器源源不断运往前线，以钢铁洪流将纳粹碾成齑粉，图哈切夫斯基的大纵深作战理论，正通过朱可夫的钢铁钳形攻势和华西列夫斯基的装甲洪流，在广袤的东欧平原上演化为死亡的艺术。从斯大林格勒到库尔斯克，从列宁格勒到巴格拉基安，希特勒只能眼睁睁看着他的军队一支又一支覆灭，他的愤怒和不甘野心和宏图都化为乌有。1945年4月30日，距离莫斯科保卫战还不到4年，苏联红军将红旗插在了柏林国会大厦的楼顶，当希特勒的手枪在地堡溅起脑浆时，叶廖缅科的突击队正用波波沙冲锋枪的弹雨，为第三帝国的棺材钉上最后一颗钢钉。 &emsp;&emsp;从莫斯科城下的绝地反击到柏林街头的最终审判，这1461天的血色行程，不仅将镰刀锤子旗插上欧陆之巅，更在人类战争史上刻下最深刻的辩证法：当钢铁洪流注入信仰之魂，最黑暗的寒冬也能熔铸出破晓的曙光。 &emsp;&emsp;值得一提的是，1943年2月2日，随着斯大林格勒战役的最终落幕，德国第六集团军司令弗里德里希·保卢斯元帅率残部向苏军投降。数日后，斯大林收到一份通过瑞典红十字会转交的电报。希特勒提议用被俘的苏联士兵雅科夫·朱加什维利——斯大林的长子——交换保卢斯元帅。此时的克里姆林宫弥漫着紧张气氛，幕僚们屏息等待领袖的决断。毕竟雅科夫自1941年斯摩棱斯克战役被俘以来，已在萨克森豪森集中营受尽折磨，期间甚至策划过两次越狱。但斯大林凝视着窗外被战火染红的天空，缓缓说道：”我不会用一名将军交换一名士兵。”这个回答通过无线电波传遍前线，既是对纳粹的断然拒绝，也是对全体苏联军民的庄严承诺——在祖国面前，统帅之子与普通士兵并无二致。恰似斯大林冷血逻辑的黑色注脚：他用亲生骨肉的死亡，铸造出不可战胜的钢铁领袖神话。 第七章 铁幕余烬：权力的黄昏&emsp;&emsp;1945年，当广岛原子弹的蘑菇云尚未消散，斯大林已经调转炮口，157万苏联红军在斯大林的指示下如钢铁巨兽般扑向伪满洲国。朱可夫的T-34集群如西伯利亚寒流般席卷伪满洲国，三天攻克哈尔滨，七日席卷长春，关东军经营十三年的要塞群在IS-2重坦的122毫米炮口下化为齑粉。太平洋舰队陆战队在朝鲜罗津港的烈焰中插上红旗，伊尔-2机群沿着中东铁路将关东军装甲列车炸成扭曲的废铁。希特勒与裕仁的东方幻想最终以魔幻方式实现——不是坦克会师乌拉尔，而是昭和男儿与纳粹战俘在土豆地里胜利会师！59万关东军喜提”斯大林农家乐终身VIP”。 注：苏军击毙关东军8.3万人，俘虏59.4万人；缴获坦克686辆、飞机861架；战后将70%缴获日军装备移交中共军队，成为东北野战军重要装备来源。 &emsp;&emsp;1939年盛夏，欧洲笼罩在战争阴云下。斯大林凝视着克里姆林宫内的东欧地图，深陷两难境地：苏联军队尚未从大清洗的创伤中恢复，而西面是蠢蠢欲动的纳粹德国，东面又遭日本在诺门罕挑起战事。尽管英、法、苏三国自4月起展开军事谈判，但英法对苏联提出的集体安全方案形同虚设，甚至要求苏联单独承担对德作战义务。 &emsp;&emsp;1946年早春的莫斯科，胜利阅兵式的彩带还未完全清扫，朱可夫元帅已被贬至敖德萨军区。克里姆林宫的长廊里，斯大林披着旧军大衣踱步，指尖摩挲着缴获的纳粹元帅权杖——这根镶嵌卐字徽章的权杖，此刻正敲打着新拟定的五年计划草案。窗外，”七大姐妹”摩天楼的钢架刺破雪雾，如同插向资本主义天空的匕首，而地下30米处的K-6地堡里，工程师正将德国V2火箭图纸转化为R-1导弹蓝图。柏林危机期间，斯大林在深夜召见莫洛托夫。当美英运输机轰鸣着突破空中封锁时，他却在宴请肖斯塔科维奇，让《第七交响乐》的暴烈乐章盖过防空警报。”要让西方明白，”他抿着格鲁吉亚葡萄酒低语，”他们的飞机不是飞越苏联领空，而是穿越我的书房。”钢琴家颤抖的指节下，音符与地缘政治博弈共振——次日清晨，30万苏军突然进驻罗马尼亚油田，这是独裁者的交响乐指挥棒在铁幕上划出的新乐谱。胜利者的偏执在冷战中疯长。 &emsp;&emsp;1949年11月，指挥列宁格勒保卫战的库兹涅佐夫元帅等2000余名功臣，因”收听爵士乐”和”亲美叛国”罪名被处决，贝利亚用缴获的纳粹打字机制造假供词。斯大林在审批处决文件时，正把玩希特勒的黄金印章——这个从柏林地堡缴获的战利品，成为他签发死刑令的专用工具。 &emsp;&emsp;二战的硝烟渐渐散去，斯大林越来越力不从心，1893年刊登在第比利斯《伊比利亚》报的《致妮娜》，被他用红铅笔反复圈划——“当雄鹰的利爪爬满皱纹，群山便不再记得它曾撕裂乌云”。1953年3月5日，当警卫破门而入，只见一具蜷缩的躯壳，左手紧攥母亲遗留的格鲁吉亚十字架——这个曾让半个世界战栗的巨人，临终时不过是个思念故乡的垂暮老人。大林子走了，他的遗物清点单上只有五套军装、三双皮靴和一本叶赛宁诗集。但在欧亚大陆的版图上，他留下了横跨11个时区的红色帝国，一个足以和西方抗衡的社会主义阵营。 &emsp;&emsp;俯仰无愧天地，褒贬自有春秋。 后记&emsp;&emsp;斯大林的一生如同一部宏大的历史悲剧，他既是时代的产物，也是时代的塑造者。他将一个落后的农业国家转变为工业强国，带领苏联人民击败了法西斯德国，为世界反法西斯战争作出了不可磨灭的贡献。然而，他也是大清洗的发动者，古拉格集中营的建立者，数百万人死于他的政策和决定。 &emsp;&emsp;评价斯大林，不能简单地用好与坏、对与错来衡量。他是一个复杂的历史人物，他的功过是非，需要放在特定的历史背景下进行客观分析。正如本书开篇所言，历史正坐在审判席上，等待后来者的质询。而我们，作为历史的后来者，有责任以理性和客观的态度，去认识和评价这位”钢铁之人”。 &emsp;&emsp;无论如何，斯大林已经成为历史的一部分，他的影响将继续存在于人类的集体记忆中。通过研究他的生平和时代，我们不仅能更好地理解20世纪的历史进程，也能从中汲取宝贵的经验和教训，为构建更加美好的未来提供参考。 &emsp;&emsp;历史的车轮滚滚向前，斯大林的故事已成为过去，但他留下的思考却永远不会过时。 © 2023 钢铁之人：斯大林传 | 版权所有","categories":[],"tags":[],"author":"k卷"},{"title":"笔记记录方法","slug":"笔记记录方法","date":"2025-04-01T12:00:17.000Z","updated":"2025-04-05T14:06:24.420Z","comments":true,"path":"2025/04/01/笔记记录方法/","permalink":"http://kjuan.xyz/2025/04/01/%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95%E6%96%B9%E6%B3%95/","excerpt":"介绍如何使用markdown记笔记","text":"1. markdown‘#’代指标题，越多’#’表示该标题层级越低 有序排列: 一身转战三千里 一剑曾当百万师 汉军奋迅如霹雳 虏骑崩腾畏蒺藜 无序排列: 家家楼上簇神仙 争看鹤冲天 代码块: 1234void function()&#123; int a; return 0;&#125; 表格: 姓名 编号 军衔 曼施坦因 0001 元帅 斯大林 0002 大元帅 三个’-‘代表横线 网址:[名称]’(统一资源定位符)’图片:![名称]’(图片网站或者图片本地地址)’如:B站 *包裹表示斜体，**包裹表示加粗黄金百战穿金甲不破楼兰终不还 数学公式 运算符 说明 举例 举例代码 $\\frac&#123;&#125;&#123;&#125;$ 分数 $\\frac{a}{b}$ $\\frac&#123;a&#125;&#123;b&#125;$ $\\sum$ 求和 $\\sum_{i&#x3D;1}^n$ $\\sum_&#123;i=1&#125;^n$ $\\int$ 积分 $\\int_a^b f(x)dx$ $\\int_a^b f(x)dx$ $\\sqrt&#123;&#125;$ 平方根 $\\sqrt{x^2 + y^2}$ $\\sqrt&#123;x^2 + y^2&#125;$ $\\partial$ 偏导数 $\\frac{\\partial f}{\\partial x}$ $\\frac&#123;\\partial f&#125;&#123;\\partial x&#125;$ $\\alpha, \\beta$ 希腊字母 $\\alpha, \\beta$ $\\alpha, \\beta$ $C_&#123;n&#125;^&#123;k&#125;$ 组合符号 $C_{n}^{k}$ $C_&#123;n&#125;^&#123;k&#125;$ $A_&#123;n&#125;^&#123;k&#125;$ 排列符号 $A_{n}^{k}$ $A_&#123;n&#125;^&#123;k&#125;$ Tips: 两个反斜杠\\\\是换行符 dollar符$包裹表示数学公式 用&#96;&#96;包裹可以解除其作用，直接显示原文 ^为上标，_为下标 2. Tag插件 行便签,用&lt;’p’ class&#x3D;’’&gt;&lt;&#x2F;&gt; 标签测试 行内标签，用&lt;’span’ class&#x3D;””&gt;&lt;&#x2F;&gt;Label 折叠块，用’{‘% fold info @标题 %’}’开头 ‘{‘% endfold %’}’结尾 ▶三五七言 入我相思门，知我相思苦长相思兮长相忆，短相思兮无穷极 按钮 ‘&lt;’a class&#x3D;”btn” href&#x3D;”url” title&#x3D;”描述”‘&gt;’按钮名称’&lt;’&#x2F;a’&gt;’点击 组图‘{‘% gi 总图数 每行数 %’}’ ![]’() ![]’()‘{‘% endgi %’}’ 3. front-matter语法layout： 布局title: 标题data:创建日期updated：更新日期tags：标签categories：分类author：作者excerpt：文章摘要layout: post # 可选：post, page, draftsticky: 100 # 文章置顶，数字越大优先级越高comments: true # 是否开启评论toc: true # 是否显示目录index_img #文章描述图片banner_img: &#x2F;images&#x2F;banner.jpg # 文章顶部大图banner_img_height: 70 # 图片高度（百分比）banner_mask_alpha: 0.3 # 图片遮罩透明度 hexo new post \"名称\"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://kjuan.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://kjuan.xyz/tags/hexo/"}],"author":"k卷"},{"title":"Hello World","slug":"hello-world","date":"2025-03-29T11:26:53.292Z","updated":"2025-04-01T13:22:30.862Z","comments":true,"path":"2025/03/29/hello-world/","permalink":"http://kjuan.xyz/2025/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"author":"关云长"}],"categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"学习笔记","slug":"数据结构/学习笔记","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://kjuan.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"卡特兰数","slug":"卡特兰数","permalink":"http://kjuan.xyz/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"},{"name":"图像处理","slug":"图像处理","permalink":"http://kjuan.xyz/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"串","slug":"串","permalink":"http://kjuan.xyz/tags/%E4%B8%B2/"},{"name":"hexo","slug":"hexo","permalink":"http://kjuan.xyz/tags/hexo/"}]}