{"meta":{"title":"鹤冲天","subtitle":"","description":"","author":"马孟起","url":"http://kjuan.xyz","root":"/"},"pages":[{"title":"关于","date":"2025-04-01T00:07:14.738Z","updated":"2025-04-01T00:07:14.738Z","comments":false,"path":"about/index.html","permalink":"http://kjuan.xyz/about/","excerpt":"","text":"关于我这里是关于我的详细介绍 技术栈 前端开发 后端架构 人工智能 学习中 深度学习 云原生 分布式系统 兴趣爱好 编程 阅读 音乐"},{"title":"标签聚合","date":"2025-04-01T06:07:22.561Z","updated":"2025-04-01T06:07:22.561Z","comments":false,"path":"tags/index.html","permalink":"http://kjuan.xyz/tags/","excerpt":"","text":""},{"title":"网站公告","date":"2025-03-31T16:00:00.000Z","updated":"2025-04-01T05:24:04.327Z","comments":false,"path":"公告/index.html","permalink":"http://kjuan.xyz/%E5%85%AC%E5%91%8A/","excerpt":"","text":"2023年11月01日 网站更新 网站改版完成 经过一段时间的努力，网站已完成全面改版，采用了全新的设计风格，优化了用户体验。主要更新内容如下： 全新的首页设计，视觉效果更佳 优化了文章页面的阅读体验 增加了深色模式支持 提升了网站整体加载速度 感谢大家一直以来的支持！ 2023年10月15日 功能预告 即将上线的新功能 我们计划在近期上线以下新功能： 文章评论系统升级 会员积分系统 更多互动功能 敬请期待！ 2023年09月20日 活动通知 读者互动活动 为了增进与读者的互动，我们将举办一系列线上活动： 优质评论奖励计划 读者投稿专栏 每月读者问答活动 欢迎大家积极参与！ 2023年08月10日 网站公告 网站创建 网站正式创建！我将在这里分享技术文章、学习笔记和个人感悟。 感谢访问，希望我的内容能够对您有所帮助！ /* 公告页面样式 */ .announcement-container { max-width: 800px; margin: 0 auto; padding: 20px; } .announcement-header { text-align: center; margin-bottom: 40px; position: relative; } .announcement-title { font-size: 2rem; color: #3498db; display: inline-block; padding-bottom: 10px; position: relative; } .announcement-title:after { content: \"\"; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 100px; height: 3px; background: linear-gradient(90deg, #3498db, #9b59b6); border-radius: 3px; } .announcement-icon { font-size: 2.5rem; color: #3498db; margin-bottom: 15px; display: block; } .announcement-item { margin-bottom: 40px; padding: 25px; border-radius: 15px; background: white; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05); transition: all 0.3s ease; border-left: 5px solid #3498db; } .announcement-item:hover { transform: translateY(-5px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1); } .announcement-meta { display: flex; justify-content: space-between; margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #f0f0f0; } .announcement-date { color: #7f8c8d; font-size: 0.9rem; } .announcement-tag { background: #3498db; color: white; padding: 3px 10px; border-radius: 20px; font-size: 0.8rem; } .announcement-item:nth-child(3) .announcement-tag { background: #9b59b6; } .announcement-item:nth-child(4) .announcement-tag { background: #e74c3c; } .announcement-item:nth-child(5) .announcement-tag { background: #2ecc71; } .announcement-content h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.4rem; } .announcement-content p { color: #34495e; line-height: 1.7; margin-bottom: 15px; } .announcement-content ul { padding-left: 20px; margin-bottom: 15px; } .announcement-content ul li { color: #34495e; margin-bottom: 8px; position: relative; } .announcement-content ul li:before { content: \"•\"; color: #3498db; font-weight: bold; display: inline-block; width: 1em; margin-left: -1em; } @media (max-width: 768px) { .announcement-meta { flex-direction: column; } .announcement-date { margin-bottom: 10px; } .announcement-tag { align-self: flex-start; } }"},{"title":"博客总结","date":"2023-11-21T16:00:00.000Z","updated":"2025-04-01T13:30:17.617Z","comments":false,"path":"总结/index.html","permalink":"http://kjuan.xyz/%E6%80%BB%E7%BB%93/","excerpt":"","text":"📄 0 文章总数 📝 0 文章总字数 📁 0 分类总数 🏷️ 0 标签总数 📊 文章发布趋势 月度 年度 📊 分类文章数量 📂 分类统计 0 个分类 加载中... 🏷️ 标签统计 0 个标签 加载中... 🔥 最新文章 加载中... .stat-card { transition: all 0.3s; border-radius: 10px; overflow: hidden; } .stat-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.1); } .stat-icon { font-size: 2rem; margin-bottom: 10px; color: #0066cc; } #category-list .badge, #tag-list .badge { font-size: 0.9rem; padding: 8px 15px; margin: 0 8px 8px 0; border-radius: 20px; transition: all 0.2s; } #category-list .badge { background-color: rgba(0, 123, 255, 0.1); color: #007bff; border: 1px solid rgba(0, 123, 255, 0.2); } #tag-list .badge { background-color: rgba(23, 162, 184, 0.1); color: #17a2b8; border: 1px solid rgba(23, 162, 184, 0.2); } #category-list .badge:hover, #tag-list .badge:hover { transform: scale(1.05); } #category-list .badge:hover { background-color: #007bff; color: white; } #tag-list .badge:hover { background-color: #17a2b8; color: white; } .card-header { background-color: rgba(0,0,0,0.03); border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-item { display: flex; align-items: center; padding: 15px; border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-rank { font-size: 1.5rem; font-weight: bold; margin-right: 15px; color: #dc3545; min-width: 30px; text-align: center; } .popular-post-title { flex-grow: 1; } .popular-post-date { color: #6c757d; font-size: 0.85rem; } .loading-text { color: #6c757d; } /* 简单图表样式 */ .simple-chart { height: 250px; display: flex; align-items: flex-end; padding-top: 20px; } .chart-bar { flex: 1; background-color: #007bff; margin: 0 3px; border-radius: 3px 3px 0 0; position: relative; min-height: 1px; transition: height 0.5s; } .chart-bar-label { position: absolute; top: -20px; left: 0; right: 0; text-align: center; font-size: 11px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; transform: rotate(-45deg); transform-origin: right bottom; } .chart-bar-value { position: absolute; bottom: 5px; left: 0; right: 0; text-align: center; color: white; font-size: 12px; font-weight: bold; } .progress-bar { transition: width 0.5s; } // 避免使用外部库，改用内置fetch API document.addEventListener('DOMContentLoaded', function() { // 缓存机制，减少重复请求 const CACHE_KEY = 'blog_stats_cache'; const CACHE_TIME = 300000; // 修改为5分钟缓存 // 添加强制刷新功能 const urlParams = new URLSearchParams(window.location.search); const forceRefresh = urlParams.get('refresh') === 'true'; // 尝试从缓存获取数据 function getCache() { try { const cache = localStorage.getItem(CACHE_KEY); if (cache && !forceRefresh) { const { data, timestamp } = JSON.parse(cache); if (Date.now() - timestamp < CACHE_TIME) { return data; } } } catch (e) { console.error('读取缓存失败', e); } return null; } // 设置缓存 function setCache(data) { try { localStorage.setItem(CACHE_KEY, JSON.stringify({ data, timestamp: Date.now() })); } catch (e) { console.error('设置缓存失败', e); } } // 添加刷新按钮 const container = document.querySelector('.container'); const refreshButton = document.createElement('div'); refreshButton.className = 'text-center mb-4'; refreshButton.innerHTML = ` 刷新统计数据 `; container.insertBefore(refreshButton, container.firstChild); document.getElementById('refresh-stats').addEventListener('click', function() { window.location.href = window.location.pathname + '?refresh=true'; }); // 先检查是否有缓存 const cachedData = getCache(); if (cachedData) { processData(cachedData); return; } // 无缓存，从服务器获取 fetch('/content.json') .then(response => response.json()) .then(data => { // 缓存数据 setCache(data); processData(data); }) .catch(error => { console.error('获取博客数据失败:', error); document.querySelector('.container').innerHTML = '获取博客数据失败，请确保已安装 hexo-generator-json-content 插件'; }); function processData(data) { // 移除加载提示 document.querySelectorAll('.loading-text').forEach(element => { element.parentElement.innerHTML = ''; }); // 文章总数 const postCount = data.posts.length; document.getElementById('post-count').textContent = postCount; // 计算总字数 let wordCount = 0; data.posts.forEach(post => { if (post.text) { wordCount += post.text.length; } }); // 格式化字数显示 let formattedWordCount; if (wordCount > 1000000) { formattedWordCount = (wordCount / 1000000).toFixed(1) + 'M'; } else if (wordCount > 10000) { formattedWordCount = (wordCount / 10000).toFixed(1) + '万'; } else if (wordCount > 1000) { formattedWordCount = (wordCount / 1000).toFixed(1) + 'k'; } else { formattedWordCount = wordCount; } document.getElementById('word-count').textContent = formattedWordCount; // 获取所有分类 const categories = {}; data.posts.forEach(post => { if (post.categories) { post.categories.forEach(category => { if (categories[category.name]) { categories[category.name]++; } else { categories[category.name] = 1; } }); } }); // 显示分类数量 const categoryCount = Object.keys(categories).length; document.getElementById('category-count').textContent = categoryCount; document.getElementById('category-total').textContent = categoryCount + ' 个分类'; // 显示分类列表 const categoryList = document.getElementById('category-list'); const sortedCategories = Object.entries(categories).sort((a, b) => b[1] - a[1]); sortedCategories.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/categories/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; categoryList.appendChild(badge); }); // 获取所有标签 const tags = {}; data.posts.forEach(post => { if (post.tags) { post.tags.forEach(tag => { if (tags[tag.name]) { tags[tag.name]++; } else { tags[tag.name] = 1; } }); } }); // 显示标签数量 const tagCount = Object.keys(tags).length; document.getElementById('tag-count').textContent = tagCount; document.getElementById('tag-total').textContent = tagCount + ' 个标签'; // 显示标签列表 const tagList = document.getElementById('tag-list'); const sortedTags = Object.entries(tags).sort((a, b) => b[1] - a[1]); sortedTags.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/tags/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; tagList.appendChild(badge); }); // 按日期对文章进行分组 const postsByMonth = {}; const postsByYear = {}; data.posts.forEach(post => { if (post.date) { const date = new Date(post.date); const year = date.getFullYear(); const month = date.getMonth(); // 按月分组 const monthKey = `${year}-${month+1}`; if (postsByMonth[monthKey]) { postsByMonth[monthKey]++; } else { postsByMonth[monthKey] = 1; } // 按年分组 if (postsByYear[year]) { postsByYear[year]++; } else { postsByYear[year] = 1; } } }); // 创建文章发布统计图表 - 使用简单的DIV实现 const monthLabels = []; const monthData = []; // 获取最近12个月的数据 const now = new Date(); for (let i = 11; i >= 0; i--) { const month = new Date(now.getFullYear(), now.getMonth() - i, 1); const year = month.getFullYear(); const monthNum = month.getMonth() + 1; const monthKey = `${year}-${monthNum}`; const monthName = `${year}/${monthNum}`; monthLabels.push(monthName); monthData.push(postsByMonth[monthKey] || 0); } const yearLabels = Object.keys(postsByYear).sort(); const yearData = yearLabels.map(year => postsByYear[year]); // 创建简单的柱状图 renderSimpleBarChart('post-chart', monthLabels, monthData); // 切换年度/月度按钮事件 document.getElementById('month-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('year-btn').classList.remove('active'); renderSimpleBarChart('post-chart', monthLabels, monthData); }); document.getElementById('year-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('month-btn').classList.remove('active'); renderSimpleBarChart('post-chart', yearLabels, yearData); }); // 创建分类统计图表 const topCategories = sortedCategories.slice(0, 8); const categoryChartLabels = topCategories.map(item => item[0]); const categoryChartData = topCategories.map(item => item[1]); renderSimpleBarChart('category-chart', categoryChartLabels, categoryChartData, [ '#FF9999', '#99CCFF', '#FFCC99', '#99FF99', '#CC99FF', '#FFFF99', '#FF99CC', '#99FFCC' ]); // 热门文章展示（这里以日期最新的5篇作为演示） const popularPosts = [...data.posts].sort((a, b) => { return new Date(b.date) - new Date(a.date); }).slice(0, 5); const popularPostsContainer = document.getElementById('popular-posts'); popularPostsContainer.innerHTML = ''; popularPosts.forEach((post, index) => { const postDate = new Date(post.date); const formattedDate = `${postDate.getFullYear()}-${postDate.getMonth()+1}-${postDate.getDate()}`; const postItem = document.createElement('a'); postItem.href = post.path; postItem.className = 'list-group-item list-group-item-action popular-post-item'; postItem.innerHTML = ` ${index+1} ${post.title} ${formattedDate} `; popularPostsContainer.appendChild(postItem); }); } // 渲染简单的柱状图，不依赖外部库 function renderSimpleBarChart(containerId, labels, data, colors) { const container = document.getElementById(containerId); container.innerHTML = ''; // 找出最大值 const maxValue = Math.max(...data); // 创建柱状图 data.forEach((value, index) => { const bar = document.createElement('div'); bar.className = 'chart-bar'; // 根据数值设置高度百分比 const heightPercent = maxValue > 0 ? (value / maxValue * 100) : 0; bar.style.height = heightPercent + '%'; // 如果有自定义颜色，则使用 if (colors && colors[index]) { bar.style.backgroundColor = colors[index]; } // 添加标签 const label = document.createElement('div'); label.className = 'chart-bar-label'; label.textContent = labels[index]; bar.appendChild(label); // 添加数值 if (value > 0) { const valueDiv = document.createElement('div'); valueDiv.className = 'chart-bar-value'; valueDiv.textContent = value; bar.appendChild(valueDiv); } container.appendChild(bar); }); } });"}],"posts":[{"title":"数据结构-串","slug":"数据结构-串","date":"2025-04-02T12:04:02.000Z","updated":"2025-04-02T16:47:01.726Z","comments":true,"path":"2025/04/02/数据结构-串/","permalink":"http://kjuan.xyz/2025/04/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%B2/","excerpt":"介绍串的基本概念，存储结构，匹配算法","text":"📚 串的定义基本概念 术语 描述 字符串 由0个或多个字符组成的有限序列，又称串 空串 长度为0的字符串（仍是合法子串） 主串 包含其他子串的字符串 子串 主串中任意连续字符组成的子序列 示例代码： 12S = &quot;IPhone 16 pro max&quot;S1 = &quot;pro&quot; # S1是S的子串，空串也是S的子串 ✨ 核心特性 字符串是特殊的线性表，数据对象限定为字符集（如ASCII、Unicode） 基本操作通常以子串为操作对象（非单个字符） 🎯 位置说明 概念 描述 示例 字符位置 字符在串中的序号（从1开始） &#39;h&#39;在S中的位置为3 子串位置 子串首字符在主串中的位置 &quot;one&quot;在S中的位置为4 🗄️ 串的存储结构顺序存储12345#define maxlen 20typedef struct &#123; char ch[maxlen]; int length;&#125; SString; 链式存储1234typedef struct StringNode &#123; char ch; struct StringNode *next;&#125; StringNode, *String; 🔍 存储方案对比顺序存储 优点：支持随机存取，存储密度大 缺点：扩展容量不方便，插入删除不方便 链式存储 优点：扩展容量分布，插入删除方便 缺点：不支持随机存取，指针占额外空间，存储密度小 🛠️ 串的基本操作核心操作流程图 1. 求子串操作1234567891011SString SubString(SString S, int pos, int len) &#123; SString sub; if (pos + len - 1 &gt; S.length) &#123; // 错误处理 &#125; for (int i = 0; i &lt; len; i++) &#123; sub.ch[i] = S.ch[pos + i - 1]; &#125; sub.length = len; return sub;&#125; 2. 字符串比较 3. 模式匹配 🔍 模式匹配算法 子串：主串的一部分，一定能在主串中找到模式串：不一定能在主串中找到 朴素模式匹配算法思想 主串S长度为n，模式串T长度为m 需要比较的次数为n-m+1 每次比较，i指向S，j指向T，i++，j++，依次匹配 如果遇到不匹配的字符 S需要从下一个位置开始，即i&#x3D;i-j+2 T需要从头开始，即j&#x3D;0 如果j&gt;T.length，则表示匹配成功，返回i-T.length 时间复杂度分析 最佳情况，O(m)，第一次遍历成功 最差情况，O((n-m+1)*m)，每次都在最后一个字符匹配失败 平均情况，O(m+n) 空间复杂度，O(1)，只用固定数量的指针变量 🚀 KMP算法 由D.E.Knuth, J.H.Morris, V.R.Pratt提出，在朴素匹配算法的基础上改进 思路： 主串S，模式串T 当匹配到i个位置，发现不匹配 但主串S前面i-1个位置是匹配的，我们可以知道其具体内容 就可以选择某个位置进行下一次匹配，避免无效匹配 这个具体位置怎么表示，就是要探讨的内容 可以发现，到第i个位置不匹配，但主串前i-1个字符是已知的 主串不需要回溯，只需要模式串选择合适的位置j继续匹配 模式串指针和主串无关，只和自身有关 其值刚好可以用一个数组表示，表示为next[] next数组构建： 123456789101112void get_next(String T, int next[]) &#123; int i = 1, j = 0; next[1] = 0; while (i &lt; T.length) &#123; if (j == 0 || T.ch[i] == T.ch[j]) &#123; ++i; ++j; next[i] = j; &#125; else &#123; j = next[j]; &#125; &#125;&#125; KMP算法的实现 模式串’abaabc’的next数组： j 1 2 3 4 5 6 next[j] 0 1 1 2 2 3 对于模式串’abaabc’ 若第一个位置不匹配，令j&#x3D;0， i++,j++再匹配 第二个，令j&#x3D;1， i不变，继续匹配 第三个，令j&#x3D;1， i不变，继续匹配 第四个，令j&#x3D;2， i不变，继续匹配 第五个，令j&#x3D;2， i不变，继续匹配 第六个，令j&#x3D;3， i不变，继续匹配 ⚡ KMP优化（nextval数组）优化策略： 利用next数组匹配模式串时，当第i个字符不匹配，主串位置不变，模式串回到next[i]位置，此方法仅考虑前i-1个字符匹配情况 实际上，第i个字符不匹配，我们可以确定第i个字符一定不是m[i]，如果模式串回到next[i]位置，而该位置恰好为m[i]，这个匹配显然是多余的 在next数组的基础上，推出nextval数组，降低时间复杂度 123456789101112131415void get_nextval(String T, int nextval[]) &#123; int i = 1, j = 0; nextval[1] = 0; while (i &lt; T.length) &#123; if (j == 0 || T.ch[i] == T.ch[j]) &#123; ++i; ++j; if (T.ch[i] != T.ch[j]) nextval[i] = j; else nextval[i] = nextval[j]; &#125; else &#123; j = nextval[j]; &#125; &#125;&#125; 算法思路 nextval[1]一定为0 当T.ch[j]&#x3D;&#x3D;T.ch[next[j]]，说明当前匹配是多余的，就算回到next[i]位置，依然不匹配 nextval[j]&#x3D;nextval[next[j]] 其余让nextval[j]&#x3D;next[j] 📌 关键总结 存储选择：顺序存储适合静态场景，链式存储适合动态场景 模式匹配：KMP通过预处理将时间复杂度优化到O(n+m) 算法优化：nextval数组避免重复无效匹配 实践要点：注意字符串终止符’\\0’的处理和长度校验","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"学习笔记","slug":"数据结构/学习笔记","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"串","slug":"串","permalink":"http://kjuan.xyz/tags/%E4%B8%B2/"}],"author":"k卷"},{"title":"笔记记录方法","slug":"笔记记录方法","date":"2025-04-01T12:00:17.000Z","updated":"2025-04-02T02:56:57.357Z","comments":true,"path":"2025/04/01/笔记记录方法/","permalink":"http://kjuan.xyz/2025/04/01/%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95%E6%96%B9%E6%B3%95/","excerpt":"介绍如何使用markdown记笔记","text":"1. markdown‘#’代指标题，越多’#’表示该标题层级越低 有序排列: 一身转战三千里 一剑曾当百万师 汉军奋迅如霹雳 虏骑崩腾畏蒺藜 无序排列: 家家楼上簇神仙 争看鹤冲天 代码块: 1234void function()&#123; int a; return 0;&#125; 表格: 姓名 编号 军衔 曼施坦因 0001 元帅 斯大林 0002 大元帅 三个’-‘代表横线 网址:[名称]’(统一资源定位符)’图片:![名称]’(图片网站或者图片本地地址)’如:B站 *包裹表示斜体，**包裹表示加粗黄金百战穿金甲不破楼兰终不还 2. Tag插件 行便签,用&lt;’p’ class&#x3D;’’&gt;&lt;&#x2F;&gt; 标签测试 行内标签，用&lt;’span’ class&#x3D;””&gt;&lt;&#x2F;&gt;Label 折叠块，用’{‘% fold info @标题 %’}’开头 ‘{‘% endfold %’}’结尾 ▶三五七言 入我相思门，知我相思苦长相思兮长相忆，短相思兮无穷极 按钮 ‘&lt;’a class&#x3D;”btn” href&#x3D;”url” title&#x3D;”描述”‘&gt;’按钮名称’&lt;’&#x2F;a’&gt;’点击 组图‘{‘% gi 总图数 每行数 %’}’ ![]’() ![]’()‘{‘% endgi %’}’ 3. front-matter语法layout： 布局title: 标题data:创建日期updated：更新日期tags：标签categories：分类author：作者excerpt：文章摘要layout: post # 可选：post, page, draftsticky: 100 # 文章置顶，数字越大优先级越高comments: true # 是否开启评论toc: true # 是否显示目录index_img #文章描述图片banner_img: &#x2F;images&#x2F;banner.jpg # 文章顶部大图banner_img_height: 70 # 图片高度（百分比）banner_mask_alpha: 0.3 # 图片遮罩透明度 hexo new post \"名称\"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://kjuan.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://kjuan.xyz/tags/hexo/"}],"author":"k卷"},{"title":"Hello World","slug":"hello-world","date":"2025-03-29T11:26:53.292Z","updated":"2025-04-01T13:22:30.862Z","comments":true,"path":"2025/03/29/hello-world/","permalink":"http://kjuan.xyz/2025/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"author":"关云长"}],"categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"学习笔记","slug":"数据结构/学习笔记","permalink":"http://kjuan.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://kjuan.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"串","slug":"串","permalink":"http://kjuan.xyz/tags/%E4%B8%B2/"},{"name":"hexo","slug":"hexo","permalink":"http://kjuan.xyz/tags/hexo/"}]}